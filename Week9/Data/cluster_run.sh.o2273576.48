R is about to run

R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/Rscript
> # Author - Jacob Griffiths, jacob.griffiths18@imperial.ac.uk
> # Date - Dec 2018
> 
> rm(list=ls())
> graphics.off()
> 
> #1 - Measure species richness based on input vector
> species_richness <- function(community){
+     return(length(unique(community)))
+ }
> 
> #3 - Initialise min
> initialise_min <- function(size){
+     x <- rep(1, each=size)
+     return(x)
+ }
> 
> #4 - Generating two random integers
> choose_two <- function(x){
+     sample(1:x, 2, replace=F)
+ }
> 
> #5 - single step of neutral model sim
> neutral_step <- function(community){
+     x <- choose_two(length(community))
+     new <- replace(community, x[1], community[x[2]])
+     return(new)
+ }
> 
> neutral_step2 <- function(community){
+     x <- choose_two(length(community))
+     new <- replace(community, x[1], max(community)+10)
+     return(new)
+ }
> 
> #9 - Neutral step with speciation
> neutral_step_speciation <- function(community, v){
+     p <- runif(1, 0, 1)
+     if (p < v){
+         neutral_step2(community)}
+     else {
+         neutral_step(community)}
+ }
> 
> #10 - Neutral generation with speciation
> neutral_generation_speciation <- function(community, v){
+     gentime <- ceiling(length(community)/2)
+     for (i in (1:gentime)){
+         community <- neutral_step_speciation(community, v)
+     }
+ return(community)
+ }
> 
> #13 - Species abundance
> species_abundance <- function(community){
+     sort(as.numeric(table(community)), decreasing = TRUE)
+ }
> 
> #14 - Bins
> octaves <- function(community){
+     j <- tabulate(floor(log2(community)+1))
+     return(j)
+ }
> 
> #17 - Cluster
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name){
+     community <- initialise_min(size) #initialise community with minimal diversity
+     rich <- c() #vector to store species richness
+     abundance <- list() #list to store species abundance
+     i <- 0 #initialise iteration counter
+     gens <- 0 #initialise generations
+     ptm <- proc.time()
+     time <- proc.time() - ptm
+     while (as.numeric(time[3]) < wall_time*60){
+         community <- neutral_generation_speciation(community, speciation_rate)
+         if (gens < burn_in_generations){
+             if (gens %% interval_rich == 0){
+                 rich <- c(rich, species_richness(community))
+             }
+         }
+         if (gens %% interval_oct == 0){
+             a <- species_abundance(community)
+             a <- octaves(a)
+             i = i + 1
+             abundance[[i]]=a
+         }
+         time <- proc.time() - ptm
+         gens = gens + 1
+     }
+     end_community <- species_abundance(community)
+     input_params <- list(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations)
+     save(input_params, end_community, rich, abundance, file=output_file_name)
+ }
> 
> set_J <- function(iter) {
+   if ((iter-1) %% 4 == 0) {
+     J <- 500
+   }
+   else if ((iter-2) %% 4 == 0) {
+     J <- 1000
+   } 
+   else if ((iter-3) %% 4 ==0) {
+     J <- 2500
+   }
+   else {
+     J <- 5000
+   }
+ }
> 
> iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #iter <- 1
> J <- set_J(iter)
> set.seed(iter)
> output_file <- paste(c("Output", iter, ".rda"), collapse = "")
> 
> cluster_run(speciation_rate = 0.004361, size=J, wall_time = 690, interval_rich = 1, interval_oct = (J/10), burn_in_generations = (8*J), output_file_name = output_file)
> 
> 
> 
> 
> 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.99 (ave)

============================================
