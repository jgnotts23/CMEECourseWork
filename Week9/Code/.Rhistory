}
}
}
graphics.off()
chaos_game(A, B, C)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y")
turtle <- function(start, direction, length){
newx <- start[1] + (length * (cos(direction)))
newy <- start[2] + (length * (sin(direction)))
segments(start[1], start[2], newx, newy)
newvec <- c(newx, newy)
return(newvec)
}
turtle(c(1,1), 45, 3)
turtle(c(-1,1), 45, 3)
?segments
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
elbow(c(-1,1), 45, 3)
elbow(c(-1,1), 45, 2)
elbow(c(-1,1), 45, 1)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
spiral(c(-1,1), 45, 1)
spiral2(c(-1,1), 45, 1)
spiral_2(c(-1,1), 45, 1)
spiral_2(c(-1,2), 45, 1)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
spiral_2(c(-1,2), 45, 1)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
tree(c(-1,2), 45, 1)
tree(c(-1,2), 45, 1)
tree(c(-1,1), 45, 1)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
tree(c(-1,1), 45, 1)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern(c(-1,1), 45, 1)
fern(c(-1,1), 45, 0.5)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern(c(-1,1), 45, 0.4)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,1), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4)
spiral_2 <- function(start, direction, length, e){ #new variable e specifies line length limit
newvec <- turtle(start, direction, length)
if (length > e){ #condition preventing infinite recursion
spiral_2(c(newvec[1], newvec[2]), direction - (pi/4), (0.95 * length))
}
}
spiral_2(c(-1,1), 45, 0.4, 0.05)
spiral_2(c(-1,1), 45, 0.4, 0.05)
spiral_2 <- function(start, direction, length, e){ #new variable e specifies line length limit
newvec <- turtle(start, direction, length)
if (length > e){ #condition preventing infinite recursion
spiral_2(c(newvec[1], newvec[2]), direction - (pi/4), (0.95 * length), e)
}
}
spiral_2(c(-1,1), 45, 0.4, 0.05)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
tree <- function(start, direction, length, e){
newvec <- turtle(start, direction, length)
if (length > e){
tree(c(newvec[1], newvec[2]), direction - (pi/4), (0.65 * length), e) #left
tree(c(newvec[1], newvec[2]), direction + (pi/4), (0.65 * length), e) #right
}
}
tree(c(-1,1), 45, 0.4, 0.05)
fern <- function(start, direction, length, e){
newvec <- turtle(start, direction, length)
if (length > 0.01){
fern(c(newvec[1], newvec[2]), direction + (pi/4), (0.38 * length), e) #left
fern(c(newvec[1], newvec[2]), direction, (0.87 * length), e) #straight on
}
}
fern(c(-1,1), 45, 0.4, 0.05)
fern <- function(start, direction, length, e){
newvec <- turtle(start, direction, length)
if (length > e){
fern(c(newvec[1], newvec[2]), direction + (pi/4), (0.38 * length), e) #left
fern(c(newvec[1], newvec[2]), direction, (0.87 * length), e) #straight on
}
}
fern(c(-1,1), 45, 0.4, 0.05)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2 <- function(start, direction, length, e, dir=-1){
newvec <- turtle(start, direction, length)
if (length > e){
dir <- -dir #change sign of dir each iteration
fern_2(c(newvec[1], newvec[2]), direction + dir*(pi/4), (0.38 * length), e, -dir)
fern_2(c(newvec[1], newvec[2]), direction, (0.87 * length), e, dir)
}
}
fern_2(c(-1,1), 45, 0.4, 0.05)
fern_2 <- function(start, direction, length, e, dir=-1){
newvec <- turtle(start, direction, length)
if (length > e){
dir <- -dir #change sign of dir each iteration
fern_2(c(newvec[1], newvec[2]), direction + dir*(pi/4), (0.38 * length), e, -dir)
fern_2(c(newvec[1], newvec[2]), direction, (0.87 * length), e, dir)
}
}
fern_2(c(-1,1), 45, 0.4, 0.05)
fern_2(c(-1,1), 45, 0.4, 0.005)
fern_2(c(-1,1), 45, 0.4, 0.0005)
fern_2(c(-1,1), 45, 0.4, 0.001)
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
challenge_A()
challenge_F <- function(start, direction, length, e, dir=-1){
ptm <- proc.time()
time <- proc.time() - ptm
newvec <- turtle(start, direction, length)
if (length > e){
dir <- -dir #change sign of dir each iteration
fern_2(c(newvec[1], newvec[2]), direction + dir*(pi/4), (0.38 * length), e, -dir)
fern_2(c(newvec[1], newvec[2]), direction, (0.87 * length), e, dir)
}
time <- proc.time() - ptm
return(time)
}
challenge_F(c(-1,1), 45, 0.4, 0.001)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(-1,1), 45, 0.4, 0.001)
challenge_F(c(-1,1), 45, 0.4, 0.01)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
par(mfrow=(2,2))
par(mfrow=c(2,2))
graphics.off()
par(mfrow=c(2,2))
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(-1,1), 45, 0.4, 0.1)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(-1,1), 45, 0.4, 0.1)
challenge_F(c(1,1), 45, 0.5, 1)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.1)
challenge_F(c(1,1), 45, 0.5, 0.01)
challenge_F(c(1,1), 45, 0.5, 0.05)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)#
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)##
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_F(c(1,1), 45, 0.5, 0.05)##
source('~/Documents/CMEECourseWork/Week9/Code/Results.R')
source('~/Documents/CMEECourseWork/Week9/Code/Results.R')
load("~/Documents/CMEECourseWork/Week9/Data/Output1.rda")
apply(simplify2array(abundance), 1:2, mean)
do.call(rbind, abundance)
abundance_matric <- do.call(rbind, abundance)
abundance_matrix <- do.call(rbind, abundance)
View(abundance_matrix)
View(abundance)
apply(abundance_matrix,1,sd)
abundance_sd <- apply(abundance_matrix,1,sd)
abundance_sd
abundance_sd <- apply(abundance_matrix, 1, mean)
abundance_sd
mean(abundance_matrix)
rowMeans(abundance_matrix)
colMeans(abundance_matrix)
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
challenge_A(())
challenge_A()
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
challenge_A()
deviation <- list()
deviation <- c(deviation, neutral_step_timeseries_simulations(initialise_max(100), 4000, 200))
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
deviation
View(deviation)
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
View(deviation)
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
View(deviation)
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
deviations(initialise_max(100), 40000, 100)
total_deviations <- deviations(initialise_max(100), 4000, 100)
View(total_deviations)
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
total_deviations <- deviations(initialise_max(100), 4000, 100)
View(total_deviations)
source('~/Documents/CMEECourseWork/Week9/Code/challenge_A.R')
View(total_deviations)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
neutral_step(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_time_series(initialise_max(7), duration=20)
question_8()
question_16()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_A()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_A()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_A()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_A()
?sample.int
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
com2 <- sample(1:60, 100, replace=TRUE)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
set.seed(123)
com1 <- sample(1:25, 100, replace=TRUE)
com2 <- sample(1:60, 100, replace=TRUE)
com3 <- sample(1:250, 100, replace=TRUE)
com4 <- sample(1:5, 100, replace=TRUE)
species_richness(com1)
species_richness(com2)
species_richness(com3)
species_richness(com4)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
?legend
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_B()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
question_20()
size500averages <- average_abundances(size500)
size500averages <- average_abundances(size500)
size1000averages <- average_abundances(size1000)
size2500averages <- average_abundances(size2500)
size5000averages <- average_abundances(size5000)
warnings()
data <- data.frame(average_abundances(size500), average_abundances(size1000),
average_abundances(size2500), average_abundances(size5000))
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_C
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_C
plot(average_richness(size5000), type='l', xlim=c(0, 2000))
lines(average_richness(size2500), type='l', col='blue')
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
lines(average_richness(size2500), type='l', col='blue')
challenge_C()
challenge_C <- function () {
par(mfrow=c(1,1))
plot(average_richness(size5000), type='l', xlim=c(0, 2000), ylab="Species richness (average)", xlab="Generation")
lines(average_richness(size2500), type='l', col='blue')
lines(average_richness(size1000), type='l', col='green')
lines(average_richness(size500), type='l', col='red')
}
challenge_C()
challenge_C <- function () {
par(mfrow=c(1,1))
plot(average_richness(size5000), type='l', xlim=c(0, 2000), ylab="Species richness (average)", xlab="Generation")
lines(average_richness(size2500), type='l', col='blue')
lines(average_richness(size1000), type='l', col='green')
lines(average_richness(size500), type='l', col='red')
legend(1500, 80, legend = c("5000", "2500", "1000", "500"), col = c("black", "blue", "green", "red") xpd = "NA", cex=1, lwd=2)
}
challenge_C <- function () {
par(mfrow=c(1,1))
plot(average_richness(size5000), type='l', xlim=c(0, 2000), ylab="Species richness (average)", xlab="Generation")
lines(average_richness(size2500), type='l', col='blue')
lines(average_richness(size1000), type='l', col='green')
lines(average_richness(size500), type='l', col='red')
legend(1500, 80, legend = c("5000", "2500", "1000", "500"), col = c("black", "blue", "green", "red"), xpd = "NA", cex=1, lwd=2)
}
challenge_C()
challenge_C <- function () {
par(mfrow=c(1,1))
plot(average_richness(size5000), type='l', xlim=c(0, 2000), ylab="Species richness (average)", xlab="Generation")
lines(average_richness(size2500), type='l', col='blue')
lines(average_richness(size1000), type='l', col='green')
lines(average_richness(size500), type='l', col='red')
legend(1500, 90, title="J value", legend = c("5000", "2500", "1000", "500"), col = c("black", "blue", "green", "red"), xpd = "NA", cex=0.8, lwd=2)
}
challenge_C()
challenge_C <- function () {
par(mfrow=c(1,1))
plot(average_richness(size5000), type='l', xlim=c(0, 2000), ylab="Species richness (average)", xlab="Generation")
lines(average_richness(size2500), type='l', col='blue')
lines(average_richness(size1000), type='l', col='green')
lines(average_richness(size500), type='l', col='red')
legend(1600, 100, title="J value", legend = c("5000", "2500", "1000", "500"), col = c("black", "blue", "green", "red"), xpd = "NA", cex=0.8, lwd=2)
}
challenge_C()
challenge_C <- function () {
par(mfrow=c(1,1))
plot(average_richness(size5000), type='l', xlim=c(0, 2000), ylab="Species richness (average)", xlab="Generation")
lines(average_richness(size2500), type='l', col='blue')
lines(average_richness(size1000), type='l', col='green')
lines(average_richness(size500), type='l', col='red')
legend(1650, 110, title="J value", legend = c("5000", "2500", "1000", "500"), col = c("black", "blue", "green", "red"), cex=0.8, lwd=2)
}
challenge_C()
challenge_C <- function () {
par(mfrow=c(1,1))
plot(average_richness(size5000), type='l', xlim=c(0, 2000), ylab="Species richness (average)", xlab="Generation")
lines(average_richness(size2500), type='l', col='blue')
lines(average_richness(size1000), type='l', col='green')
lines(average_richness(size500), type='l', col='red')
legend(1650, 110, title="J value", legend = c("5000", "2500", "1000", "500"), col = c("black", "blue", "green", "red"), xpd="NA", cex=0.8, lwd=2)
}
challenge_C()
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
challenge_D()
challenge_D <- function (v=0.004361, J=500) {
abundances <- c()
abund <- c()
for (i in 1:20000) {
abund <- coalescence(v, J)
abund <- sort(abund, decreasing = TRUE)
abund <- octaves(abund)
abundances <- sum_vect(abundances, abund)
}
average <- abundances / 20000
return(average)
}
challenge_D()
challenge_D <- function (v=0.004361, J=500) {
abundances <- c()
abund <- c()
for (i in 1:2000) {
abund <- coalescence(v, J)
abund <- sort(abund, decreasing = TRUE)
abund <- octaves(abund)
abundances <- sum_vect(abundances, abund)
}
average <- abundances / 20000
return(average)
}
challenge_D()
challenge_D <- function (v=0.004361, J) {
abundances <- c()
abund <- c()
for (i in 1:2000) {
abund <- coalescence(v, J)
abund <- sort(abund, decreasing = TRUE)
abund <- octaves(abund)
abundances <- sum_vect(abundances, abund)
}
average <- abundances / 20000
return(average)
}
challenge_D()
challenge_D(v, J=500)
challenge_D(J=500)
challenge_D(J=1000)
challenge_D <- function (v=0.004361, J) {
abundances <- c()
abund <- c()
ptm <- proc.time() #start timer
time <- proc.time() - ptm
for (i in 1:2000) {
abund <- coalescence(v, J)
abund <- sort(abund, decreasing = TRUE)
abund <- octaves(abund)
abundances <- sum_vect(abundances, abund)
}
time <- proc.time() - ptm
print(time)
average <- abundances / 20000
return(average)
}
challenge_D(J=500)
challenge_D(J=1000)
challenge_D(J=2500)
challenge_D(J=5000)
challenge_E(A, B, C, c(0,0), 2)
challenge_F(c(1,1), 45, 0.4, 0.005, direction = )
challenge_F(c(1,1), 45, 0.4, 0.1)
challenge_F(c(1,1), 45, 0.4, 0.01)
challenge_F(c(1,1), 45, 0.4, 0.05)
question_20()
spiral_2(c(-1,2), 45, 1, 0.05)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y") #blank plot
par(mfrow=c(1,1))
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y") #blank plot
spiral_2(c(-1,2), 45, 1, 0.05)
plot(NA, xlim=c(0,5), ylim=c(0,5), xlab="X", ylab="Y") #blank plot
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
spiral_2(c(-1,2), 45, 1, 0.05)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
tree(c(-1,2), 45, 1, 0.05)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
tree(c(-1,2), 45, 1, 0.05)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
tree(c(-1,1), 45, 1, 0.05)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 1, 0.05)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4, 0.005)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,1), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4, 0.005)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4, 0.005)
fern_2(c(-1,1), 45, 0.4, 0.001)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4, 0.001)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4, 0.005)
#23 - Drawing a line between two points on a graph.
#     Requires start(vector), direction (in degrees), length(of the plotted line)
plot(NA, xlim=c(-2,2), ylim=c(0,4), xlab="X", ylab="Y") #blank plot
fern_2(c(-1,1), 45, 0.4, 0.003)
