x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
unique(x)
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (length(unique(x)) != 1){
counter = counter + 1
}
}
data <- read.csv("~/Desktop/leah_data.csv")
View(data)
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
read.csv?
)
help("read.csv")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
View(data)
View(data)
library("MASS")
print(str(data))
## Cross-tabulation ##
fourandsix <- data.frame(data$Source, data$Care)
View(fourandsix)
fourandsix = table(data$Source, data$Care)
print(fourandsix)
print(chisq.test(fourandsix))
sixandten <- data.frame(data$Care, data$Relationship) ##subset
sixandten = table(data$Care, data$Relationship) ##cross-tabulate
print(sixandten) ##view cross-tabulation
print(chisq.test(sixandten)) ##chi-squared
sevenandten <- data.frame(data$Care_reason, data$Relationship) ##subset
sevenandten = table(data$Care_reason, data$Relationship) ##cross-tabulate
print(sevenandten) ##view cross-tabulation
print(chisq.test(sevenandten)) ##chi-squared
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
rm(list=ls())
MySample <- rnorm(10, m=0, sd=1)
MySample
hist(MySample)
# Probability of getting a value of 1 or -1 from a normally-distributed random number
# with mean 0 and sd = 1:
dnorm(1, m=0, sd=1)
dnorm(-1, m=0, sd=1)
# Probability of getting large value with same distribution:
dnorm(10, m=0, sd=1)
dnorm(100, m=0, sd=1)
# Testing rule 1 using R:
MySample5 <- rnorm(5, m=0, sd=1)
source('~/leah.R')
View(data)
convenienceandsix <- data.frame(data$Convenience, data$Care) ##subset
convenienceandsix = table(data$Convenience, data$Care) ##cross-tabulate
print(convenienceandsix) ##view cross-tabulation
print(chisq.test(convenienceandsix)) ##chi-squared
damageandsix <- data.frame(data$Damage, data$Care) ##subset
damageandsix = table(data$Damage, data$Care) ##cross-tabulate
print(damageandsix) ##view cross-tabulation
print(chisq.test(damageandsix)) ##chi-squared
welfareandsix <- data.frame(data$Welfare, data$Care) ##subset
welfareandsix = table(data$Welfare, data$Care) ##cross-tabulate
print(welfareandsix) ##view cross-tabulation
print(chisq.test(welfareandsix)) ##chi-squared
securityandsix <- data.frame(data$Security, data$Care) ##subset
securityandsix = table(data$Security, data$Care) ##cross-tabulate
print(securityandsix) ##view cross-tabulation
print(chisq.test(securityandsix)) ##chi-squared
### Finance vs. Day care option ###
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
### Convenience vs. Day care option ###
convenienceandsix <- data.frame(data$Convenience, data$Care) ##subset
convenienceandsix = table(data$Convenience, data$Care) ##cross-tabulate
print(convenienceandsix) ##view cross-tabulation
print(chisq.test(convenienceandsix)) ##chi-squared
### Damage vs. Day care option ###
damageandsix <- data.frame(data$Damage, data$Care) ##subset
damageandsix = table(data$Damage, data$Care) ##cross-tabulate
print(damageandsix) ##view cross-tabulation
print(chisq.test(damageandsix)) ##chi-squared
### Welfare vs. Day care option ###
welfareandsix <- data.frame(data$Welfare, data$Care) ##subset
welfareandsix = table(data$Welfare, data$Care) ##cross-tabulate
print(welfareandsix) ##view cross-tabulation
print(chisq.test(welfareandsix)) ##chi-squared
### Security vs. Day care option ###
securityandsix <- data.frame(data$Security, data$Care) ##subset
securityandsix = table(data$Security, data$Care) ##cross-tabulate
print(securityandsix) ##view cross-tabulation
print(chisq.test(securityandsix)) ##chi-squared
source('~/leah.R')
source('~/leah.R')
library("ggplot2")
source('~/leah.R')
warnings()
### Visualisation ###
qplot(Alone_time, data=data)
### Visualisation ###
qplot(as.factor(Alone_time), data=data)
### Visualisation ###
qplot(as.factor(Alone_time)), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data)
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data)
### Visualisation ###
ggplot(as.factor(Alone_time), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time), data=data)
### Visualisation ###
qplot(as.factor(Alone_time), data=data)
?qplot
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour=cyl)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="cyl")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour=red)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=Alone_time)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time))
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.5), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour="black", fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour=Interaction, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour=Interaction, xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
rm(list=ls())
graphics.off()
library("ggplot2")
library("MASS")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
load("~/Documents/CMEECourseWork/Week9/Output1.rda")
View(input_params)
load("~/Documents/CMEECourseWork/Week9/Output2.rda")
View(input_params)
View(input_params)
View(input_params)
View(input_params)
load("~/Documents/CMEECourseWork/Week9/Output3.rda")
View(input_params)
rm(list=ls())
graphics.off()
require(ggplot2)
# Read in data (make sure you're in correct directory)
data <- read.csv("Patrols_Complete.csv") # didn't need to change date format
setwd("~/Documents/The_Patrol_Data_and_graph_/")
# Read in data (make sure you're in correct directory)
data <- read.csv("Patrols_Complete.csv") # didn't need to change date format
data2plot <- data[!is.na(data$Total_Time_mins),] #remove missing values in y variable
data2plot <- data2plot[!is.na(data2plot$PATROLDATE),] #remove missing values in x variable
# Create a new column called 'Month' and assign accordingly
# Basically converts from dd/mm/yyyy to longhand month and year format (e.g. Jan '15)
data2plot$Month <- format( as.Date(data2plot$PATROLDATE,"%d/%m/%Y") , "%b '%y")
p <- ggplot(data=data2plot, aes(x=Month, y=Total_Time_mins)) + #choosing data to plot
#identity tells R to use Y values for the bars and steelblue just changes colour
geom_bar(stat="identity", fill="steelblue") +
labs(x = "Time (Month/Year", y = "Total Time (mins)") + #format axis labels
theme_minimal() + #just an aesthetic that makes it look nicer
theme(axis.text.x = element_text(angle = 90, size = 8)) #changing size and orientation of bin labels
p #to plot
rm(list=ls())
graphics.off()
library("ggplot2")
library("MASS")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
source('~/leah.R')
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
source('~/leah.R')
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
source('~/leah.R')
View(data)
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
str(data)
### Visualisation ###
levels(data$Alone_time) <- c("0-2", "2-4", "4-6", "6-8", "8-10", "10+")
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
plot(data$Source, data%Care)
plot(data$Source, data$Care)
pairs(data)
barplot(data$Finance)
questions <- data[6:10]
View(questions)
test <- ggplot(data, aes(questions, value, fill = variable)) +
geom_bar(position = "stack") +
coord_flip() +
xlab("") +
ylab("Number of responses") +
scale_fill_brewer(type = "div")
test
test <- ggplot(data, aes(questions, fill = "identity")) +
geom_bar(position = "stack") +
coord_flip() +
xlab("") +
ylab("Number of responses") +
scale_fill_brewer(type = "div")
test
test
test <- ggplot(data, aes(questions)) +
geom_bar(position = "stack", stat="identity") +
coord_flip() +
xlab("") +
ylab("Number of responses") +
scale_fill_brewer(type = "div")
test
plot(questions)
barplot(questions)
test <- ggplot(data, aes(as.factor(questions))) +
geom_bar(position = "stack", stat="identity") +
coord_flip() +
xlab("") +
ylab("Number of responses") +
scale_fill_brewer(type = "div")
test
install.packages("sjPlot")
library("sjPlot")
questions <- as.factor(data[6:10])
str(data)
questions <- factor(questions[1:5])
data <- factor(data$Finance)
str(data)
source('~/leah.R')
source('~/leah.R')
#data <- factor(data$Finance)
questions <- factor(data$Finance, data$Convenience)
likert_6 <- data.frame(as.factor(data$Finance),
as.factor(data$Convenience),
as.factor(data$Damage),
as.factor(data$Welfare),
as.factor(data$Security))
likert_6
View(likert_6)
str(likert_6)
View(data)
likert_6 <- data.frame(as.factor(data$Finance),
as.factor(data$Convenience),
as.factor(data$Damage),
as.factor(data$Welfare),
as.factor(data$Security))
levels_6 <- list(c("1", "2", "3", "4", "5"))
items <- list(c("Finance", "Convenience", "Damage", "Welfare", "Security"))
sjp.likert(likert_6, legendLabels=levels_6, barColor="brown", axisLabels.x=items, orderBy="pos")
likert_6 <- data.frame(as.factor(data$Finance),
as.factor(data$Convenience),
as.factor(data$Damage),
as.factor(data$Welfare),
as.factor(data$Security))
levels_6 <- list(c("1", "2", "3", "4", "5"))
items <- list(c("Finance", "Convenience", "Damage", "Welfare", "Security"))
sjplot.likert(likert_6, legendLabels=levels_6, barColor="brown", axisLabels.x=items, orderBy="pos")
source('~/leah.R')
library(devtools)
devtools::install_github("strengejacke/sjPlot")
source('~/leah.R')
q
source('~/leah.R')
source('~/leah.R')
levels(data$Alone_time) <- c("0-2", "2-4", "4-6", "6-8", "8-10", "10+")
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
likert_6 <- data.frame(as.factor(data$Finance),
as.factor(data$Convenience),
as.factor(data$Damage),
as.factor(data$Welfare),
as.factor(data$Security))
levels_6 <- list(c("1", "2", "3", "4", "5"))
items <- list(c("Finance", "Convenience", "Damage", "Welfare", "Security"))
plot_model(likert_6, legendLabels=levels_6, barColor="brown", axisLabels.x=items, orderBy="pos")
source('~/leah.R')
source('~/leah.R')
source('~/leah.R')
source('~/leah.R')
source('~/leah.R')
?plot_likert
source('~/leah.R')
plot_likert(likert_6, legend.labels=levels_6, geom.colors="brown")
plot_likert(likert_6)
plot_likert(likert_6, catcount=5)
plot_likert(likert_6, axis.labels = items, catcount=5)
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, axis.labels = items, catcount=5)
plot_likert(likert_6, title="Factors affecting dog care", axis.labels = items, catcount=5)
plot_likert(likert_6, title="Factors affecting dog care", axis.labels = items, catcount=5,
legend.labels = levels_6)
levels_6 <- c("1", "2", "3", "4", "5")
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, title="Factors affecting dog care", axis.labels = items, catcount=5,
legend.labels = levels_6)
levels_6 <- c("1 - Not important", "2", "3", "4", "5 - Very important")
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, title="Factors affecting dog care", axis.labels = items, catcount=5,
legend.labels = levels_6)
levels_6 <- c("1", "2", "3", "4", "5")
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6)
levels_6 <- c("1", "2", "3", "4", "5")
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 20)
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 40)
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60)
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 20)
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 15)
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12)
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide")
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "sum.outside")
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide")
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
reverse.colors = TRUE)
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = "red")
palette(c(rgb(170,93,152, maxColorValue=255),
rgb(103,143,57, maxColorValue=255),
rgb(196,95,46, maxColorValue=255),
rgb(79,134,165, maxColorValue=255),
rgb(205,71,103, maxColorValue=255),
rgb(203,77,202, maxColorValue=255),
rgb(115,113,206, maxColorValue=255))
palette <- c(rgb(170,93,152, maxColorValue=255),
rgb(103,143,57, maxColorValue=255),
rgb(196,95,46, maxColorValue=255),
rgb(79,134,165, maxColorValue=255),
rgb(205,71,103, maxColorValue=255),
rgb(203,77,202, maxColorValue=255),
rgb(115,113,206, maxColorValue=255))
palette <- c(rgb(170,93,152, maxColorValue=255),
rgb(103,143,57, maxColorValue=255),
rgb(196,95,46, maxColorValue=255),
rgb(79,134,165, maxColorValue=255),
rgb(205,71,103, maxColorValue=255),
rgb(203,77,202, maxColorValue=255),
rgb(115,113,206, maxColorValue=255))
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = "palette")
palette <- c(rgb(170,93,152, maxColorValue=255),
rgb(103,143,57, maxColorValue=255),
rgb(196,95,46, maxColorValue=255),
rgb(79,134,165, maxColorValue=255),
rgb(205,71,103, maxColorValue=255))
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = "palette")
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = palette)
palette <- c(rgb(170,93,152, maxColorValue=255),
rgb(103,143,57, maxColorValue=255),
rgb(196,95,46, maxColorValue=255),
rgb(79,134,165, maxColorValue=255),
rgb(205,71,103, maxColorValue=255),
rgb(203,77,202, maxColorValue=255),
rgb(115,113,206, maxColorValue=255))
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = palette)
library("RColorBrewer")
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = Blues)
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = brewer.pal(5, "Blues"))
plot_likert(likert_6, title="Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = brewer.pal(4:9, "Blues"))
?plot_likert
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, title="      Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = brewer.pal(5, "Blues"), geom.size = )
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, title="            Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 60, wrap.labels = 12, values = "hide",
geom.colors = brewer.pal(5, "Blues"), geom.size = )
items <- c("Finance", "Convenience", "Damage", "Welfare", "Security")
plot_likert(likert_6, title="            Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 70, wrap.labels = 12, values = "hide",
geom.colors = brewer.pal(5, "Blues"), geom.size = )
plot_likert(likert_6, title="             Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 70, wrap.labels = 12, values = "hide",
geom.colors = brewer.pal(5, "Blues"), geom.size = )
plot_likert(likert_6, title="             Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 70, wrap.labels = 12, values = "hide",
geom.colors = brewer.pal(5, "Blues"), axis.titles = c("Percentage of respondents"))
plot_likert(likert_6, title="             Factors affecting dog care (5 being very important)", axis.labels = items, catcount=5,
legend.labels = levels_6, wrap.title = 70, wrap.labels = 12, values = "hide",
geom.colors = brewer.pal(5, "Blues"), axis.titles = c("", "Percentage of respondents"))
#!/usr/bin/Rscript
# Author - Jacob Griffiths, jacob.griffiths18@imperial.ac.uk
# Date - Nov 2018
rm(list=ls())
graphics.off()
source('~/Documents/CMEECourseWork/Week9/Code/Results.R')
setwd("~/Documents/CMEECourseWork/Week9/Code")
source('~/Documents/CMEECourseWork/Week9/Code/Results.R')
par(mfrow=c(2,2))
par(oma = c(4, 4, 1, 0))
par(mar = c(2, 2, 1, 1))
barplot(size500averages, col = alpha(colours, 0.6), xlab = '', xaxt = 'n', main="J = 500")
barplot(size1000averages, col = alpha(colours, 0.6), ylab = '', xaxt = 'n', yaxt = 'n', main="J = 1000")
barplot(size2500averages, col = alpha(colours, 0.6), xlab = '', ylab = '', main="J = 2500")
barplot(size5000averages, col = alpha(colours, 0.6), xlab = '', ylab = '', yaxt = 'n', main="J = 5000")
legend(-4.2, 25.5, legend = bins, fill = alpha(colours, 0.6), xpd = "NA", cex=0.75)
mtext('Min. species abundance (No. individuals)', side = 1, outer = TRUE, line = 2)
mtext('Number of species', side = 2, outer = TRUE, line = 2)
source('~/Documents/CMEECourseWork/Week9/Code/jsg18.R')
species_richness(c(1,4,4,5,1,6,1))
initialise_max(7)
initialise_min(4)
species_richness(initialise_min(6))
species_richness(initialise_max(6))
choose_two(4)
choose_two(4)
choose_two(4)
choose_two(4)
choose_two(4)
choose_two(4)
choose_two(4)
neutral_time_series(initial = initialise_max(7), duration=20)
question_8 <- function(){
plot((neutral_time_series(initialise_max(100), duration=200)), type="l",
xlab="Generations", ylab="Species Richness")
}
question_8()
question_8 <- function(){
plot((neutral_time_series(initialise_max(100), duration=200)), type="l",
xlab="Generations", ylab="Species richness")
}
question_8()
question_8()
question_8()
question_8()
pdf("../Results/question_8.pdf")
question_8()
dev.off()
