\relax 
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces A neutral model simulation with a starting species richness of 100, modelled over 200 generations. The number of generations simulated is always half the starting community size\relax }}{1}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Comparison of different starting community species richness on neutral simulations. Initialise\_max(100) creates a community with species richness 100 and Initialise\_min(100) creates a community with species richness 1. A speciation rate (v) of 0.1 was used\relax }}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Number of species in each 'octave class' for two neutral simulations. Left is a community that started with species richness 100 and right is a community that started with species richness 1. The speciation rate was 0.1.\relax }}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Species richness of two different starting communities over 4000 neutral steps and averaged across 200 simulations. A speciation rate of 0.1 was used.\relax }}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Species richness over time with four different initial community species richnesses. The same speciation rate was used as in Figure 4 and clearly all communities converge on the same dynamic equilibrium regardless of initial species richness\relax }}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Average octave classes over 25 simulations in each community size (J). All simulations were run using high-performance computing for 12 hours. A burn-in time of J/10 generations was used and not incorporated in these averages. Each octave class doubles in abundance as you move one to the right.\relax }}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Mean species richness over 2000 generations of the HPC simulations. Community size clearly affects the mean species richness and the larger communities take more generations to reach dynamic equilibrium\relax }}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces The Sierpinski Gasket as plotted by the chaos game function.\relax }}{8}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Sierpinski Gasket with a variety of X values and divisors. Changing X has no effect on the Gasket but the divisor does. Green points indicate the X start point, red points indicate the first 10 points of X, and the blue triangles indicate the values of A, B, and C that were used as the points of the Gasket. Increasing the divisor causes the Gasket to break down but decreasing it causes several smaller Gaskets to form.\relax }}{9}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces The output of the 'spiral\_2' function using a starting point of (-1,2), an angle of 45 degrees and a starting line length of 1. The infinite recursion of 'spiral' was avoided in this function by terminating the function when the line length got to a specified size\relax }}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces An extension of the 'spiral\_2' function called 'tree'. It calls itself twice, once for left and once for right at the same angle to make this tree-like structure.\relax }}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces An extension of the 'tree' function that either calls itself and goes left or right, or goes straight on. The code ensure that the direction always alternates, creating this fern-like structure.\relax }}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces Varying the input parameter 'e' in the 'fern\_2' function to see its effect. 'e' determines the line length that the function will stop looping at so a lower 'e' value will give a more detailed plot that takes longer to run as can be seen here.\relax }}{13}}
