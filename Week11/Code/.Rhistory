#!/usr/bin/Rscript
# Author - Jacob Griffiths, jacob.griffiths18@imperial.ac.uk
# Date - Nov 2018
rm(list=ls())
graphics.off()
#1 - measure species richness based on input vector
species_richness <- function(community){
return(length(unique(community)))
}
#2 - function to define max possible species in community
initialise_max <- function(size){
return(seq(1:size))
}
#3 - Monodominance
initialise_min <- function(size){
x <- rep(1, each=size)
return(x)
}
#4 - Generating two random integers
choose_two <- function(x){
sample(1:x, 2, replace=F)
}
#5 - single step of neutral model sim
neutral_step <- function(y){
x <- choose_two(length(y))
new <- replace(y, x[1], y[x[2]])
return(new)
}
#6 - several steps
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for i in (1:gentime){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
?replace
y = c(1,3)
x = y
y = c(10,5,13)
replace(y, x[1], 10000)
replace(y, x[1], 10000)
replace(y, x[2], 10000)
replace(y, x[2], 10000)
replace(y, 1, 10000)
replace(y, 2, 10000)
replace(y, 3, 10000)
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for j in seq(1,15){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
source('~/.active-rstudio-document', echo=TRUE)
counter = 0
for (i in seq(1,10000)){
if (i %% 1000 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(a)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
unique(x)
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (length(unique(x)) != 1){
counter = counter + 1
}
}
data <- read.csv("~/Desktop/leah_data.csv")
View(data)
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
read.csv?
)
help("read.csv")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
View(data)
View(data)
library("MASS")
print(str(data))
## Cross-tabulation ##
fourandsix <- data.frame(data$Source, data$Care)
View(fourandsix)
fourandsix = table(data$Source, data$Care)
print(fourandsix)
print(chisq.test(fourandsix))
sixandten <- data.frame(data$Care, data$Relationship) ##subset
sixandten = table(data$Care, data$Relationship) ##cross-tabulate
print(sixandten) ##view cross-tabulation
print(chisq.test(sixandten)) ##chi-squared
sevenandten <- data.frame(data$Care_reason, data$Relationship) ##subset
sevenandten = table(data$Care_reason, data$Relationship) ##cross-tabulate
print(sevenandten) ##view cross-tabulation
print(chisq.test(sevenandten)) ##chi-squared
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
rm(list=ls())
MySample <- rnorm(10, m=0, sd=1)
MySample
hist(MySample)
# Probability of getting a value of 1 or -1 from a normally-distributed random number
# with mean 0 and sd = 1:
dnorm(1, m=0, sd=1)
dnorm(-1, m=0, sd=1)
# Probability of getting large value with same distribution:
dnorm(10, m=0, sd=1)
dnorm(100, m=0, sd=1)
# Testing rule 1 using R:
MySample5 <- rnorm(5, m=0, sd=1)
source('~/leah.R')
View(data)
convenienceandsix <- data.frame(data$Convenience, data$Care) ##subset
convenienceandsix = table(data$Convenience, data$Care) ##cross-tabulate
print(convenienceandsix) ##view cross-tabulation
print(chisq.test(convenienceandsix)) ##chi-squared
damageandsix <- data.frame(data$Damage, data$Care) ##subset
damageandsix = table(data$Damage, data$Care) ##cross-tabulate
print(damageandsix) ##view cross-tabulation
print(chisq.test(damageandsix)) ##chi-squared
welfareandsix <- data.frame(data$Welfare, data$Care) ##subset
welfareandsix = table(data$Welfare, data$Care) ##cross-tabulate
print(welfareandsix) ##view cross-tabulation
print(chisq.test(welfareandsix)) ##chi-squared
securityandsix <- data.frame(data$Security, data$Care) ##subset
securityandsix = table(data$Security, data$Care) ##cross-tabulate
print(securityandsix) ##view cross-tabulation
print(chisq.test(securityandsix)) ##chi-squared
### Finance vs. Day care option ###
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
### Convenience vs. Day care option ###
convenienceandsix <- data.frame(data$Convenience, data$Care) ##subset
convenienceandsix = table(data$Convenience, data$Care) ##cross-tabulate
print(convenienceandsix) ##view cross-tabulation
print(chisq.test(convenienceandsix)) ##chi-squared
### Damage vs. Day care option ###
damageandsix <- data.frame(data$Damage, data$Care) ##subset
damageandsix = table(data$Damage, data$Care) ##cross-tabulate
print(damageandsix) ##view cross-tabulation
print(chisq.test(damageandsix)) ##chi-squared
### Welfare vs. Day care option ###
welfareandsix <- data.frame(data$Welfare, data$Care) ##subset
welfareandsix = table(data$Welfare, data$Care) ##cross-tabulate
print(welfareandsix) ##view cross-tabulation
print(chisq.test(welfareandsix)) ##chi-squared
### Security vs. Day care option ###
securityandsix <- data.frame(data$Security, data$Care) ##subset
securityandsix = table(data$Security, data$Care) ##cross-tabulate
print(securityandsix) ##view cross-tabulation
print(chisq.test(securityandsix)) ##chi-squared
source('~/leah.R')
source('~/leah.R')
library("ggplot2")
source('~/leah.R')
warnings()
### Visualisation ###
qplot(Alone_time, data=data)
### Visualisation ###
qplot(as.factor(Alone_time), data=data)
### Visualisation ###
qplot(as.factor(Alone_time)), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data)
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data)
### Visualisation ###
ggplot(as.factor(Alone_time), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time), data=data)
### Visualisation ###
qplot(as.factor(Alone_time), data=data)
?qplot
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour=cyl)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="cyl")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour=red)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=Alone_time)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time))
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.5), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour="black", fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour=Interaction, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour=Interaction, xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
rm(list=ls())
graphics.off()
library("ggplot2")
library("MASS")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
load("~/Documents/CMEECourseWork/Week9/Output1.rda")
View(input_params)
load("~/Documents/CMEECourseWork/Week9/Output2.rda")
View(input_params)
View(input_params)
View(input_params)
View(input_params)
load("~/Documents/CMEECourseWork/Week9/Output3.rda")
View(input_params)
setwd("~/Documents/CMEECourseWork/Week11/Code")
d <- read.table("../Data/SparrowSize.txt", header=TRUE)
View(d)
str(d)
names(d)
head(d)
# Centrality and spread
hist(d$Tarsus, main="", xlab="Sparrow tarus length (mm)", col="grey")
mean(d$Tarsus, na.rm=TRUE)
var(d$Tarsus, na.rm=TRUE)
sd(d$Tarsus, na.rm=TRUE)
hist(d$Tarsus, main="", xlab="Sparrow tarsus length (mm)", col="grey",
prob=TRUE)
lines(density(d$Tarsus,na.rm=TRUE), lwd = 2)  # density plot
abline(v = mean(d$Tarsus, na.rm = TRUE), col = "red",lwd = 2)
abline(v = mean(d$Tarsus, na.rm = TRUE)-sd(d$Tarsus, na.rm = TRUE), col = "blue",lwd = 2, lty=5)
abline(v = mean(d$Tarsus, na.rm = TRUE)+sd(d$Tarsus, na.rm = TRUE), col = "blue",lwd = 2, lty=5)
t.test(d$Tarsus~d$Sex)
par(mfrow=c(2,1))
hist(d$Tarsus[d$Sex==1], main="", xlab="Male sparrow tarsus length (mm)", col="grey", prob=TRUE)
lines(density(d$Tarsus[d$Sex==1],na.rm=TRUE), lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm = TRUE), col = "red",lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm = TRUE)-sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col = "blue",lwd = 2, lty=5)
abline(v = mean(d$Tarsus[d$Sex==1], na.rm = TRUE)+sd(d$Tarsus[d$Sex==1], na.rm = TRUE), col = "blue",lwd = 2, lty=5)
hist(d$Tarsus[d$Sex==0], main="", xlab="Female sparrow tarsus length (mm)", col="grey", prob=TRUE)
lines(density(d$Tarsus[d$Sex==0],na.rm=TRUE), lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm = TRUE), col = "red",lwd = 2)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm = TRUE)-sd(d$Tarsus[d$Sex==0], na.rm = TRUE), col = "blue",lwd = 2, lty=5)
abline(v = mean(d$Tarsus[d$Sex==0], na.rm = TRUE)+sd(d$Tarsus[d$Sex==0], na.rm = TRUE), col = "blue",lwd = 2, lty=5)
?abline
##### Variance ####
# Variance is the sum of the squared deviations from the mean, over the sample size minus 1
# If two independent variables are summed, the variance of that summed variable is equal to
# the sum of the variance of each individual variable
d1<-subset(d, d$Tarsus!="NA")
d1<-subset(d1, d1$Wing!="NA")
sumz<-var(d1$Tarsus)+var(d1$Wing)
test<-var(d1$Tarsus+d1$Wing) 	#add then variance
sumz
test
dev.off()
plot(jitter(d1$Wing),d1$Tarsus, pch=19, cex=0.4)
cov(d1$Tarsus,d1$Wing)
sumz<-var(d1$Tarsus)+var(d1$Wing)+2*cov(d1$Tarsus,d1$Wing)
test<-var(d1$Tarsus+d1$Wing)
sumz
test
#### Linear models ####
uni<-read.table("../Data/RUnicorns.txt", header=T)
str(uni)
head(uni)
mean(uni$Bodymass)
sd(uni$Bodymass)
var(uni$Bodymass)
hist(uni$Bodymass)
mean(uni$Hornlength)
sd(uni$Hornlength)
var(uni$Hornlength)
hist(uni$Hornlength)
plot(uni$Bodymass~uni$Hornlength, pch=19, xlab="Unicorn horn length", ylab="Unicorn body mass", col="blue")
mod<-lm(uni$Bodymass~uni$Hornlength)
abline(mod, col="red")
res <- signif(residuals(mod), 5)
pre <- predict(mod)
segments(uni$Hornlength, uni$Bodymass, uni$Hornlength, pre, col="black")
?signif
?predict
# We can add all covariates and fixed factors that account for variation then test which
# ones account for the most variation
hist(uni$Bodymass)
hist(uni$Hornlength)
hist(uni$Height)
hist(uni$Hornlength)
# We can add all covariates and fixed factors that account for variation then test which
# ones account for the most variation
hist(uni$Bodymass)
# What about collinearity?
cor.test(uni$Hornlength,uni$Height)
boxplot(uni$Bodymass~uni$Gender)
boxplot(uni$Bodymass~uni$Gender, ylab="Body mass")
par(mfrow=c(2,1))
boxplot(uni$Bodymass~uni$Pregnant)
plot(uni$Hornlength[uni$Pregnant==0],uni$Bodymass[uni$Pregnant==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(uni$Hornlength[uni$Pregnant==1],uni$Bodymass[uni$Pregnant==1], pch=19, col="red")
par(mfrow=c(1,1))
plot(uni$Hornlength[uni$Pregnant==0],uni$Bodymass[uni$Pregnant==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(uni$Hornlength[uni$Pregnant==1],uni$Bodymass[uni$Pregnant==1], pch=19, col="red")
par(mfrow=c(1,2))
boxplot(uni$Bodymass~uni$Pregnant)
plot(uni$Hornlength[uni$Pregnant==0],uni$Bodymass[uni$Pregnant==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(uni$Hornlength[uni$Pregnant==1],uni$Bodymass[uni$Pregnant==1], pch=19, col="red")
par(mfrow=c(1,2))
boxplot(uni$Bodymass~uni$Pregnant, xlab="Pregnant", ylab="Body mass")
plot(uni$Hornlength[uni$Pregnant==0],uni$Bodymass[uni$Pregnant==0], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(uni$Hornlength[uni$Pregnant==1],uni$Bodymass[uni$Pregnant==1], pch=19, col="red")
plot(uni$Hornlength[uni$Gender=="Female"],uni$Bodymass[uni$Gender=="Female"], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
par(mfrow=c(1,1))
plot(uni$Hornlength[uni$Gender=="Female"],uni$Bodymass[uni$Gender=="Female"], pch=19, xlab="Horn length", ylab="Body mass", xlim=c(2,10), ylim=c(6,19))
points(uni$Hornlength[uni$Gender=="Male"],uni$Bodymass[uni$Gender=="Male"],pch=19, col="red")
points(uni$Hornlength[uni$Gender=="Undecided"],uni$Bodymass[uni$Gender=="Undecided"],pch=19, col="green")
FullModel<-lm(uni$Bodymass~uni$Hornlength+uni$Gender+uni$Pregnant+uni$Glizz)
summary(FullModel)
