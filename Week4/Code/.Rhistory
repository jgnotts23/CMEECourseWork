#!/usr/bin/Rscript
# Author - Jacob Griffiths, jacob.griffiths18@imperial.ac.uk
# Date - Nov 2018
rm(list=ls())
graphics.off()
#1 - measure species richness based on input vector
species_richness <- function(community){
return(length(unique(community)))
}
#2 - function to define max possible species in community
initialise_max <- function(size){
return(seq(1:size))
}
#3 - Monodominance
initialise_min <- function(size){
x <- rep(1, each=size)
return(x)
}
#4 - Generating two random integers
choose_two <- function(x){
sample(1:x, 2, replace=F)
}
#5 - single step of neutral model sim
neutral_step <- function(y){
x <- choose_two(length(y))
new <- replace(y, x[1], y[x[2]])
return(new)
}
#6 - several steps
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for i in (1:gentime){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
?replace
y = c(1,3)
x = y
y = c(10,5,13)
replace(y, x[1], 10000)
replace(y, x[1], 10000)
replace(y, x[2], 10000)
replace(y, x[2], 10000)
replace(y, 1, 10000)
replace(y, 2, 10000)
replace(y, 3, 10000)
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for j in seq(1,15){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
source('~/.active-rstudio-document', echo=TRUE)
counter = 0
for (i in seq(1,10000)){
if (i %% 1000 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(a)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
unique(x)
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (length(unique(x)) != 1){
counter = counter + 1
}
}
data <- read.csv("~/Desktop/leah_data.csv")
View(data)
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
read.csv?
)
help("read.csv")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
View(data)
View(data)
library("MASS")
print(str(data))
## Cross-tabulation ##
fourandsix <- data.frame(data$Source, data$Care)
View(fourandsix)
fourandsix = table(data$Source, data$Care)
print(fourandsix)
print(chisq.test(fourandsix))
sixandten <- data.frame(data$Care, data$Relationship) ##subset
sixandten = table(data$Care, data$Relationship) ##cross-tabulate
print(sixandten) ##view cross-tabulation
print(chisq.test(sixandten)) ##chi-squared
sevenandten <- data.frame(data$Care_reason, data$Relationship) ##subset
sevenandten = table(data$Care_reason, data$Relationship) ##cross-tabulate
print(sevenandten) ##view cross-tabulation
print(chisq.test(sevenandten)) ##chi-squared
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
rm(list=ls())
MySample <- rnorm(10, m=0, sd=1)
MySample
hist(MySample)
# Probability of getting a value of 1 or -1 from a normally-distributed random number
# with mean 0 and sd = 1:
dnorm(1, m=0, sd=1)
dnorm(-1, m=0, sd=1)
# Probability of getting large value with same distribution:
dnorm(10, m=0, sd=1)
dnorm(100, m=0, sd=1)
# Testing rule 1 using R:
MySample5 <- rnorm(5, m=0, sd=1)
rm(list=ls())
graphics.off()
getws()
getwd()
setwd("~/Documents/CMEECourseWork/Week4/Code")
# t-test
choose(2:6, 2)
genome <- read.csv("../Data/GenomeSize.csv")
str(genome)
mean.gs <- mean(genome$GenomeSize)
print(mean.gs)
var.gs <- var(genome$GenomeSize)
print(var.gs)
n.gs <- length(genome$GenomeSize)
print(n.gs)
diff <- mean.gs - 1.25
print(diff)
se.gs <- sqrt(var.gs/n.gs) #standard error
print(se.gs)
t.gs <- diff/se.gs #t-value
print(t.gs)
# Using R's in-built t-test
t.test(genome$GenomeSize, mu = 1.25)
tlim <- qt(c(0.025,0.975), df = 99)
print(tlim)
mean.gs + tlim * se.gs
# Body weight exercise
t.test(genome$BodyWeight, mu = 0.045)
# F-test
par(mfrow=c(1,2))
?boxplot
Anisoptera <- subset(genome, Suborder=='Anisoptera') #The dragonflies
Zygoptera <- subset(genome, Suborder=='Zygoptera') #The damselflies
boxplot(GenomeSize ~ Suborder, data=genome)
boxplot(BodyWeight ~ Suborder, data=genome)
var.gs[1]/var.gs[2]
var.gs <- var(genome$GenomeSize) #variance
print(var.gs)
var.test(GenomeSize ~ Suborder, data=genome)
var.test(BodyWeight ~ Suborder, data=genome)
# Using log-transformations to normalise distributions:
genome$logBodyWeight <- log(genome$BodyWeight)
boxplot(genome$logBodyWeight)
boxplot(logBodyWeight ~ Suborder, data=genome)
# F-test
par(mfrow=c(1,2))
# F-test
par(mfrow=c(1,1))
boxplot(logBodyWeight ~ Suborder, data=genome)
# F-test
par(mfrow=c(1,2))
boxplot(logBodyWeight ~ Suborder, data=genome)
?t.test
t.test(Suborder, logBodyWeight, data=genome)
t.test(genome$Suborder, genome$logBodyWeight)
t.test(logBodyWeight ~ Suborder, data=genome)
var.test(logBodyWeight ~ Suborder, data=genome)
## Non-parametric tests ##
# If the variable cannot be conveniently transformed that gives roughlt constant variation and variance
# Wilcoxon test to the rescue!
# Less likely to reveal significant differences, but robust test
wilcox.test(genome$GenomeSize, mu=1.25)
t.test(genome$GenomeSize, mu = 1.25)
View(genome)
rm(list=ls())
graphics.off()
genome <- read.csv("../Data/GenomeSize.csv")
head(genome)
# The 'pairs' function
pairs(genome, col=genome$Suborder)
# Re-acquaint with indices in dataframes
dat <- data.frame(A = c("a", "b", "c", "d", "e"), B = c(1, 2, 3, 4, 5))
dat[1, ] #row 1, all columns
dat[, 2] #column 2, all rows
dat[2,1] #row 2, column 1
# Analysis
morpho_vars <- c(4, 7, 8, 12, 14) # store the indices
pairs(genome[, morpho_vars], col = genome$Suborder)
# Calculating correlation coefficients
# Pearson correlation looks at the difference of each point from the mean of each variable
# 'cor' calculates correlation between pairs of variables
# 'cor.test' can only compare a single pair of variables but uses a t-test to assess
# whether the correlation is significant
cor(genome[, morpho], use = 'pairwise')
# Calculating correlation coefficients
# Pearson correlation looks at the difference of each point from the mean of each variable
# 'cor' calculates correlation between pairs of variables
# 'cor.test' can only compare a single pair of variables but uses a t-test to assess
# whether the correlation is significant
cor(genome[, morpho_vars], use = 'pairwise')
cor.test(genome$GenomeSize, genome$TotalLength, use = "pairwise")
genome$logGS <- log(genome$GenomeSize)
genome$logBW <- log(genome$BodyWeight)
genome$logTL <- log(genome$TotalLength)
genome$logFL <- log(genome$ForewingLength)
genome$logFA <- log(genome$ForewingArea)
str(genome)
logmorpho <- c(17, 18, 19, 20, 21)
pairs(genome[, logmorpho], col=genome$Suborder)
cor(genome{, logmorpho}, col=genome$Suborder)
cor(genome{, logmorpho], col=genome$Suborder)
cor(genome[], logmorpho], col=genome$Suborder)
cor(genome[, logmorpho], col=genome$Suborder)
cor(genome[, logmorpho], use="pairwise")
## Performing a regression analysis ##
myColours <- c('red', 'blue')
mySymbols <- c(1, 3)
colnames(genome)
plot(logBW ~ GenomeSize, data=genome,
col = myColours[Suborder], pch = mySymbols[Suborder],
xlab="Total length (mm)", ylab="Genome Size (pg)")
legend("topleft", legend=levels(genome$Suborder),
col=myColours, pch=mySymbols)
# Model fitting:
nullModelDragon <- lm(logBW ~ 1, data=genome, subset = Suborder == "Anisoptera")
genomeSizeModelDragon <- lm(logBW ~ logGS, data=genome, subset = Suborder == "Anisoptera")
summary(genomeSizeModelDragon)
# Look at terms with ANOVA:
anova(genomeSizeModelDragon)
# For Damselflies
genomeSizeModelDamsel <- lm(logBW ~ logGS, data=genome,subset=Suborder=='Zygoptera')
summary(genomeSizeModelDamsel)
anova(genomeSizeModelDamsel)
# Plotting fitted regression model
myCol <- c('red','blue')
plot(logBW ~ logGS, data=genome, col=myCol[Suborder], xlab='log Genome Size (pg)', ylab='log Body Weight (g)')
abline(genomeSizeModelDragon, col='red')
abline(genomeSizeModelDamsel, col='blue')
# Check if models are appropriate - diagnostic plots
par(mfrow = c(2,2), mar = c(5, 5, 1.5, 1.5))
plot(genomeSizeModelDragon)
