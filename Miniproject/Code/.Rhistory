#!/usr/bin/Rscript
# Author - Jacob Griffiths, jacob.griffiths18@imperial.ac.uk
# Date - Nov 2018
rm(list=ls())
graphics.off()
#1 - measure species richness based on input vector
species_richness <- function(community){
return(length(unique(community)))
}
#2 - function to define max possible species in community
initialise_max <- function(size){
return(seq(1:size))
}
#3 - Monodominance
initialise_min <- function(size){
x <- rep(1, each=size)
return(x)
}
#4 - Generating two random integers
choose_two <- function(x){
sample(1:x, 2, replace=F)
}
#5 - single step of neutral model sim
neutral_step <- function(y){
x <- choose_two(length(y))
new <- replace(y, x[1], y[x[2]])
return(new)
}
#6 - several steps
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for i in (1:gentime){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
?replace
y = c(1,3)
x = y
y = c(10,5,13)
replace(y, x[1], 10000)
replace(y, x[1], 10000)
replace(y, x[2], 10000)
replace(y, x[2], 10000)
replace(y, 1, 10000)
replace(y, 2, 10000)
replace(y, 3, 10000)
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for j in seq(1,15){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
source('~/.active-rstudio-document', echo=TRUE)
counter = 0
for (i in seq(1,10000)){
if (i %% 1000 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(a)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
unique(x)
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (length(unique(x)) != 1){
counter = counter + 1
}
}
getwd
getwd()
setwd("~/Documents/CMEECourseWork/Miniproject/Code")
source("prep.R")
arrenhius <- function(Temp, Ea, k, A0, ){
return(A0*(exp(-Ea/(k*Temp))))
}
arrenhius <- function(Temp, Ea, k, A0,){
return(A0*(exp(-Ea/(k*Temp))))
}
arrenhius <- function(Temp, Ea, k, A0,){
return(A0*(exp(-Ea/(k*Temp))))
}
source("prep.R")
source("prep.R")
k <- 8.617*(10^-5)
k
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
arrfit <- nlsLM(OriginalTraitValue ~ cubic(AmbientTemp, Ea, k, A0), data = Mannisto, start = list(Ea = .01, A0 = .01))
arrfit <- nlsLM(OriginalTraitValue ~ arrenhius(AmbientTemp, Ea, k, A0), data = Mannisto, start = list(Ea = .01, A0 = .01))
summary(arrfit)
coef(arrfit)["Ea"]
coef(arrfit)["A0"]
predic_arrfit <- arrenhius(Lengths,coef(arrfit)["Ea"],coef(arrfit)["A0"])
predic_arrfit <- arrenhius(Lengths,coef(arrfit)["Ea"],k,coef(arrfit)["A0"])
lines(Lengths, predic_arrfit, col = 'blue', lwd = 2.5)
exp?
)
source("prep.R")
lines(Lengths, predic_arrfit, col = 'blue', lwd = 2.5)
arrenhius <- function(x, Ea, k, A0){
return(A0*(exp(-(Ea/(k*x)))))
}
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
arrfit <- nlsLM(OriginalTraitValue ~ arrenhius(AmbientTemp, Ea, k, A0), data = Mannisto, start = list(Ea = .01, A0 = .01))
summary(arrfit)
coef(arrfit)["Ea"]
coef(arrfit)["A0"]
predic_arrfit <- arrenhius(Lengths,coef(arrfit)["Ea"],k,coef(arrfit)["A0"])
lines(Lengths, predic_arrfit, col = 'blue', lwd = 2.5)
source("prep.R")
lines(Lengths, predic_arrfit, col = 'blue', lwd = 2.5)
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
lines(Lengths, predic_cubfit, col = 'blue', lwd = 2.5)
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
coef(arrfit)["Ea"]
coef(arrfit)["A0"]
predic_arrfit <- arrenhius(Lengths,coef(arrfit)["Ea"],k,coef(arrfit)["A0"])
lines(Lengths, predic_arrfit, col = 'blue', lwd = 2.5)
arrenhius <- function(Temp, Ea, A0){
return(A0*(exp(-(Ea/(k*Temp)))))
}
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
arrenhius(Lengths, 0.65, 1)
plot(arrenhius(Lengths, 0.65, 1))
arrfit <- nlsLM(OriginalTraitValue ~ arrenhius(AmbientTemp, Ea, A0), data = Mannisto, start = list(Ea = .01, A0 = .01))
summary(arrfit)
coef(arrfit)["Ea"]
coef(arrfit)["A0"]
predic_arrfit <- arrenhius(Lengths,coef(arrfit)["Ea"],coef(arrfit)["A0"])
plot(predic_arrfit)
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
lines(Lengths, predic_arrfit, col = 'blue', lwd = 2.5)
arrfit <- nlsLM(OriginalTraitValue ~ arrenhius(AmbientTemp, Ea, A0), data = Mannisto, start = list(Ea = .65, A0 = 1))
summary(arrfit)
coef(arrfit)["Ea"]
coef(arrfit)["A0"]
predic_arrfit <- arrenhius(Lengths,coef(arrfit)["Ea"],coef(arrfit)["A0"])
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
lines(Lengths, predic_arrfit, col = 'blue', lwd = 2.5)
plot(predic_arrfit)
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
arrfit <- nlsLM(OriginalTraitValue ~ arrenhius(AmbientTemp, Ea, A0), data = Mannisto, start = list(Ea = .65, A0 = 10))
summary(arrfit)
lines(Lengths, predic_cubfit, col = 'blue', lwd = 2.5)
plot(Mannisto$AmbientTemp, Mannisto$OriginalTraitValue)
lines(Lengths, predic_arrfit, col = 'blue', lwd = 2.5)
