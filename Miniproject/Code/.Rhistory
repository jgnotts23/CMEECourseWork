neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for j in seq(1,15){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
source('~/.active-rstudio-document', echo=TRUE)
counter = 0
for (i in seq(1,10000)){
if (i %% 1000 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(a)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
unique(x)
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (length(unique(x)) != 1){
counter = counter + 1
}
}
data <- read.csv("~/Desktop/leah_data.csv")
View(data)
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
read.csv?
)
help("read.csv")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
View(data)
View(data)
library("MASS")
print(str(data))
## Cross-tabulation ##
fourandsix <- data.frame(data$Source, data$Care)
View(fourandsix)
fourandsix = table(data$Source, data$Care)
print(fourandsix)
print(chisq.test(fourandsix))
sixandten <- data.frame(data$Care, data$Relationship) ##subset
sixandten = table(data$Care, data$Relationship) ##cross-tabulate
print(sixandten) ##view cross-tabulation
print(chisq.test(sixandten)) ##chi-squared
sevenandten <- data.frame(data$Care_reason, data$Relationship) ##subset
sevenandten = table(data$Care_reason, data$Relationship) ##cross-tabulate
print(sevenandten) ##view cross-tabulation
print(chisq.test(sevenandten)) ##chi-squared
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
rm(list=ls())
MySample <- rnorm(10, m=0, sd=1)
MySample
hist(MySample)
# Probability of getting a value of 1 or -1 from a normally-distributed random number
# with mean 0 and sd = 1:
dnorm(1, m=0, sd=1)
dnorm(-1, m=0, sd=1)
# Probability of getting large value with same distribution:
dnorm(10, m=0, sd=1)
dnorm(100, m=0, sd=1)
# Testing rule 1 using R:
MySample5 <- rnorm(5, m=0, sd=1)
source('~/leah.R')
View(data)
convenienceandsix <- data.frame(data$Convenience, data$Care) ##subset
convenienceandsix = table(data$Convenience, data$Care) ##cross-tabulate
print(convenienceandsix) ##view cross-tabulation
print(chisq.test(convenienceandsix)) ##chi-squared
damageandsix <- data.frame(data$Damage, data$Care) ##subset
damageandsix = table(data$Damage, data$Care) ##cross-tabulate
print(damageandsix) ##view cross-tabulation
print(chisq.test(damageandsix)) ##chi-squared
welfareandsix <- data.frame(data$Welfare, data$Care) ##subset
welfareandsix = table(data$Welfare, data$Care) ##cross-tabulate
print(welfareandsix) ##view cross-tabulation
print(chisq.test(welfareandsix)) ##chi-squared
securityandsix <- data.frame(data$Security, data$Care) ##subset
securityandsix = table(data$Security, data$Care) ##cross-tabulate
print(securityandsix) ##view cross-tabulation
print(chisq.test(securityandsix)) ##chi-squared
### Finance vs. Day care option ###
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
### Convenience vs. Day care option ###
convenienceandsix <- data.frame(data$Convenience, data$Care) ##subset
convenienceandsix = table(data$Convenience, data$Care) ##cross-tabulate
print(convenienceandsix) ##view cross-tabulation
print(chisq.test(convenienceandsix)) ##chi-squared
### Damage vs. Day care option ###
damageandsix <- data.frame(data$Damage, data$Care) ##subset
damageandsix = table(data$Damage, data$Care) ##cross-tabulate
print(damageandsix) ##view cross-tabulation
print(chisq.test(damageandsix)) ##chi-squared
### Welfare vs. Day care option ###
welfareandsix <- data.frame(data$Welfare, data$Care) ##subset
welfareandsix = table(data$Welfare, data$Care) ##cross-tabulate
print(welfareandsix) ##view cross-tabulation
print(chisq.test(welfareandsix)) ##chi-squared
### Security vs. Day care option ###
securityandsix <- data.frame(data$Security, data$Care) ##subset
securityandsix = table(data$Security, data$Care) ##cross-tabulate
print(securityandsix) ##view cross-tabulation
print(chisq.test(securityandsix)) ##chi-squared
source('~/leah.R')
source('~/leah.R')
library("ggplot2")
source('~/leah.R')
warnings()
### Visualisation ###
qplot(Alone_time, data=data)
### Visualisation ###
qplot(as.factor(Alone_time), data=data)
### Visualisation ###
qplot(as.factor(Alone_time)), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data)
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data)
### Visualisation ###
ggplot(as.factor(Alone_time), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time), data=data)
### Visualisation ###
qplot(as.factor(Alone_time), data=data)
?qplot
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour=cyl)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="cyl")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour=red)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=Alone_time)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time))
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.5), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour="black", fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour=Interaction, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour=Interaction, xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
setwd("~/Documents/CMEECourseWork/Miniproject/Code")
source('~/Documents/CMEECourseWork/Miniproject/Code/Allometry_nlls.R')
head(MyData)
## Subset and remove NAs:
Data2Fit <- subset(MyData, Suborder == "Anisoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),]
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point()
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit, start = list(a = .1, b = .1))
summary(PowFit)
## Visualising the fit
Lengths <- seq(min(Data2Fit$TotalLength),max(Data2Fit$TotalLength),len=200) #vector of body lengths
coef(PowFit)["a"] #extract coefficients
coef(PowFit)["b"]
Predic2PlotPow <- powMod(Lengths,coef(PowFit)["a"],coef(PowFit)["b"])
plot(Data2Fit$TotalLength, Data2Fit$BodyWeight) #plot data
lines(Lengths, Predic2PlotPow, col = 'blue', lwd = 2.5) #and fitted model line
## Calculate confidence intervals
confint(PowFit)
### Exercises ###
## A - make same plot in ggplot ##
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point
graphics.off()
### Exercises ###
## A - make same plot in ggplot ##
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point
### Exercises ###
## A - make same plot in ggplot ##
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point()
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE)
annotate("text", x = 20, y = 0.3, color = "black", size = 5,
label = LinEqn(lm(y~a*(x^b), Data2Fit)), parse = TRUE)
annotate("text", x = 20, y = 0.3, color = "black", size = 5,
label = Weight=3.94×10−06×Length2.59, Data2Fit)), parse = TRUE)
annotate("text", x = 20, y = 0.3, color = "black", size = 5,
label = "Weight=3.94×10−06×Length2.59", Data2Fit)), parse = TRUE)
annotate("text", x = 20, y = 0.3, color = "black", size = 5,
label = "Weight=3.94×10−06×Length2.59", parse = TRUE)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
annotate("text", x = 20, y = 0.3, color = "black", size = 5,
label = "Weight=3.94×10−06×Length2.59", parse = TRUE)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
annotate("text", x = 20, y = 0.3, color = "black", size = 5,
label = "Weight=3.94*10^06 * Length^2.59", parse = TRUE)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
annotate("text", x = 25, y = 0.3, color = "black", size = 4,
label = "Weight=3.94*10^06 * Length^2.59", parse = TRUE)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
annotate("text", x = 30, y = 0.3, color = "black", size = 4,
label = "Weight=3.94*10^06 * Length^2.59", parse = TRUE)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
annotate("text", x = 40, y = 0.3, color = "black", size = 4,
label = "Weight=3.94*10^06 * Length^2.59", parse = TRUE)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
annotate("text", x = 40, y = 0.3, color = "black", size = 4,
label = Weight~3.94*10^06 * Length^2.59, parse = TRUE)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
stat_regline_equation(label.x = 30, label.y = 0.3)
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(PowFit)[1], digits = 2),
b = format(coef(Powfit)[2], digits = 2),
r2 = format(summary(PowFit)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
geom_text(x = 30, y = 0.3, label = lm_eqn(MyData), parse = TRUE)
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(coef(PowFit)[1], digits = 2),
b = format(coef(PowFit)[2], digits = 2),
r2 = format(summary(PowFit)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
geom_text(x = 30, y = 0.3, label = lm_eqn(MyData), parse = TRUE)
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
geom_text(x = 40, y = 0.3, label = lm_eqn(MyData), parse = TRUE)
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a + b %.% italic(x)*,
list(a = format(coef(PowFit)[1], digits = 2),
b = format(coef(PowFit)[2], digits = 2)))
as.character(as.expression(eq));
}
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a + b %.% italic(x)*,
list(a = format(coef(PowFit)[1], digits = 2),
b = format(coef(PowFit)[2], digits = 2))
as.character(as.expression(eq));
}
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a + b %.% italic(x),
list(a = format(coef(PowFit)[1], digits = 2),
b = format(coef(PowFit)[2], digits = 2))
as.character(as.expression(eq));
}
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a + b %.% italic(x),
list(a = format(coef(PowFit)[1], digits = 2),
b = format(coef(PowFit)[2], digits = 2)))
as.character(as.expression(eq));
}
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
geom_text(x = 40, y = 0.3, label = lm_eqn(MyData), parse = TRUE)
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a + b %.% italic(x),
list(a = format(coef(PowFit)[1], digits = 3),
b = format(coef(PowFit)[2], digits = 3)))
as.character(as.expression(eq));
}
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
geom_text(x = 40, y = 0.3, label = lm_eqn(MyData), parse = TRUE)
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a * b %.% italic(x),
list(a = format(coef(PowFit)[1], digits = 3),
b = format(coef(PowFit)[2], digits = 3)))
as.character(as.expression(eq));
}
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
geom_text(x = 40, y = 0.3, label = lm_eqn(MyData), parse = TRUE)
lm_eqn <- function(Data2Fit){
eq <- substitute(italic(y) == a + b %.% italic(x),
list(a = format(coef(PowFit)[1], digits = 3),
b = format(coef(PowFit)[2], digits = 3)))
as.character(as.expression(eq));
}
ggplot(Data2Fit, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
geom_text(x = 40, y = 0.3, label = lm_eqn(MyData), parse = TRUE)
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit, start = list(a = .1, b = .1))
summary(PowFit)
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit, start = list(a = 10, b = 10))
summary(PowFit)
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit, start = list(a = 100, b = 100))
summary(PowFit)
## C - Repeat using Zygoptera data ##
Data2Fit <- subset(MyData, Suborder == "Zygoptera")
Data2Fit <- Data2Fit[!is.na(Data2Fit$TotalLength),]
## C - Repeat using Zygoptera data ##
Data2Fit2 <- subset(MyData, Suborder == "Zygoptera")
Data2Fit2 <- Data2Fit[!is.na(Data2Fit$TotalLength),]
source('~/Documents/CMEECourseWork/Miniproject/Code/Allometry_nlls.R')
plot(Data2Fit2$TotalLength, Data2Fit2$BodyWeight)
ggplot(Data2Fit2, aes(x = TotalLength, y = BodyWeight)) + geom_point()
PowFit <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit2, start = list(a = .1, b = .1))
summary(PowFit)
Lengths2 <- seq(min(Data2Fit2$TotalLength),max(Data2Fit2$TotalLength),len=200) #vector of body lengths
PowFit2 <- nlsLM(BodyWeight ~ powMod(TotalLength, a, b), data = Data2Fit2, start = list(a = .1, b = .1))
summary(PowFit2)
Lengths2 <- seq(min(Data2Fit2$TotalLength),max(Data2Fit2$TotalLength),len=200) #vector of body lengths
coef(PowFit2)["a"] #extract coefficients
coef(PowFit2)["b"]
Predic2PlotPow2 <- powMod(Lengths2,coef(PowFit2)["a"],coef(PowFit2)["b"])
lines(Lengths2, Predic2PlotPow2, col = 'blue', lwd = 2.5) #and fitted model line
Predic2PlotPow2 <- powMod(Lengths2,coef(PowFit2)["a"],coef(PowFit2)["b"])
source('~/Documents/CMEECourseWork/Miniproject/Code/Allometry_nlls.R')
ggplot(Data2Fit2, aes(x = TotalLength, y = BodyWeight)) + geom_point() +
stat_smooth(method = 'nls', formula = 'y~a*(x^b)',
method.args = list(start=c(a=0.1, b=0.1)), se=FALSE) +
geom_text(x = 40, y = 0.3, label = lm_eqn(MyData), parse = TRUE)
## D = using OLS ##
# bi-logarithmically transform the data
# log(y) = log(a) + blog(x)
out <- lm(BodyWeight~TotalLength,data=Data2Fit)
summary(out)
## D = using OLS ##
# bi-logarithmically transform the data
# log(y) = log(a) + blog(x)
out <- lm(log(BodyWeight)~log(TotalLength),data=Data2Fit)
summary(out)
lengths()
head(Lengths)
Lengths
?seq
