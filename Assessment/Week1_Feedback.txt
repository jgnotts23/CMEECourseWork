Starting weekly assessment for Jacob, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 4.24 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Seminars, Week7, Assessment, Week10, Week5, Week2, Week9, Week4, .git, Miniproject, Week3

Found the following files in parent directory: README.txt, temporary.tmp, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~
*.tmp
*.p
*.pyc
pickle 
/Week5/Data/GIS_Practical_1_files
/Week3/Data/EcolArchives-E089-51-D1.csv
/Miniproject/Data/BioTraits.csv
/Week4/Data/HandOutsandData'18
/Week4/Data/Lectures'18
/Week5/Data/GIS_2016
/Week5/Data/GIS_Practical_1_files
/Week10/Data/BiolStructs_C
/CMEE_Exams
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week10, Week2, Week3, Week4, Week5, Week6, Week7, Week9

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
###############################
README - CMEE Coursework Week 1
###############################

### Description

This directory and its subsidaries contains the code created in week 1 of the Computational Methods in Ecology and Evolution MSc at Imperial College London. Some code was provided by my supervisor, Samraat Pawar, and the rest is original content. Subdirectories have been created entitled 'Code', 'Data', 'Results' and 'Sandbox'. 'Code' contains several bash scripts, a LaTex script, and some .txt files with additional code. 'Data' contains any data that was used to test the scripts and 'Results' is where any script outputs will appear. 'Sandbox' was created for practice purposes only and can be ignored. The purpose of this project was to learn basic UNIX coding, learn how to use GIT and to learn the basics of LaTex.


### Dependencies

Everything in this project was created and run with the ubuntu 16.04 OS.
Most of the code was either entered directly into the UNIX terminal or saved as a shell script created in Visual Studio Code 1.27.2


### Authors/Contributors

Jacob Griffiths, jacob.griffiths18@imperial.ac.uk
Samraat Pawar, s.pawar@imperial.ac.uk


### Useful Links

github CMEE Coursework repository: https://github.com/jgnotts23/CMEECourseWork


### .gitignore list

*~
*.tmp
*.p
*.pyc
pickle 
/Week5/Data/GIS_Practical_1_files

**********************************************************************

Found following files in results directory: README.txt...
Found 23 code files: installing.sh, ConcatenateTwoFiles.sh, UNIX_commands.txt, README.txt, CountLines.sh, variables.sh, CompileLaTeX.sh, tiff2png.sh, dir_structure.txt, csvtospace.sh, FirstExample.tex, MyExampleScript.sh, FirstBiblio.bib, UnixPrac1.txt, tabtocsv.sh, finding_files.sh, UNIX_shortcuts.txt, grep.sh, bash_command_challenge.sh, redir_pipes.sh, boilerplate.sh, wildcards.sh, tr.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file installing.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: installing.sh
# Desc: how to install/uninstall in linux
# Arguments: None
# Date: Nov 2018

### Installing from main repositories ###
sudo apt install r-base # sudo (super user do)

### Installing from other repositories ###
# Add repository
sudo add-apt-repository ppa:atareao/atareao

# Update repository package list
sudo apt-get update 

# Install
sudo apt-get install my-weather-indicator

### Removing softare ###
sudo apt remove totem

### Installing from downloaded *.deb file ###
# First download the .deb package then:
cd ~/Downloads

# De-package
sudo dpkg -i <file>.deb 

# Install dependencies
sudo apt-get install -f

exit**********************************************************************

Testing installing.sh...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00746s

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: ConcatenateTwoFiles.sh
# Desc: Concatenate (merge) the contents of two files
# Arguments: Two files
# Date: Oct 2018

cat $1 > $3
cat $2 >> $3
echo "Merged File is"
cat $3

exit**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 

**********************************************************************
Merged File is

**********************************************************************

Encountered error:
ConcatenateTwoFiles.sh: line 8: $3: ambiguous redirect
ConcatenateTwoFiles.sh: line 9: $3: ambiguous redirect

======================================================================
Inspecting script file UNIX_commands.txt...

File contents are:
**********************************************************************
###################
Basic UNIX commands
###################

man COMMAND         Show help page of a command
whoami              Display your username
pwd                 Show the current directory
ls                  List the files in the directory 
cd DIRNAME          Change directory 
cd ..               Move one directory up
cd /                Go to the root directory 
cd ~ or just cd     Go to the home directory
cp FROM TO          Copy a file, or a directory non-recursively
cp -r FROM TO       Copy a directory recursively 
mv FROM TO          Move or rename a file or directory
touch FILENAME      Create an empty file 
echo "My string"    Print a string 
rm FILEorDIRNAME    Remove a file or directory non-recursively
rm -r DIRNAME       Remove a directory recursively
wc FILENAME         Count the number of lines and words in a file
sort FILENAME       Sort the lines of a file and print results
uniq                Shows only unique elements of a list
cat FILENAME        Print the file on the screen
less FILENAME       Progressivelt print a file on the screen ("q" to exit)
head FILENAME       Print the first few lines of a file
tail FILENAME       Print the last few lines of a file
history             Show the last commands you typed
date                Print current date
file FILENAME       Determine the type of a file
passwd              Change user password
chmod FILENAME      Change file permissions**********************************************************************

Testing UNIX_commands.txt...

======================================================================
Inspecting script file README.txt...

File contents are:
**********************************************************************
###################################
README - CMEE Coursework Week1 CODE
###################################
.
├── bash_command_challenge.sh
	Answer to the bash challenge question
├── boilerplate.sh
	Simple boilerplate for shell scripts
├── CompileLaTeX.sh
	Complies a LaTeX .pdf from a .tex and .bib input
├── ConcatenateTwoFiles.sh
	Concatenates two files
├── CountLines.sh
	Counts the number of lines in a file
├── csvtospace.sh
	Converts comma-separated files to space-separated files
├── dir_structure.txt
	Notes on UNIX directory structure
├── finding_files.sh
	Demonstrates how to find files in UNIX
├── FirstBiblio.bib
	Example bibliography to cobine with FirstExample.tex
├── FirstExample.tex
	Example LaTeX document script
├── grep.sh
	Demonstrates the use of grep
├── installing.sh
	Demonstrates installation in UNIX
├── MyExampleScript.sh
	Demonstrates echo and placeholders
├── redir_pipes.sh
	Demonstrates redirecting and pipes in UNIX
├── tabtocsv.sh
	Converts space-separated files to comma-separated files
├── tiff2png.sh
	Converts .tif images to .png images
├── tr.sh
	Demonstrates the use of tr
├── UNIX_commands.txt
	Notes on basic UNIX commands
├── UnixPrac1.txt
	Answers to the UNIX practical, involves analysis of FASTA files in the Data directory
├── UNIX_shortcuts.txt
	Notes on UNIX shortcuts
├── variables.sh
	Illustrates the use of variables in UNIX
└── wildcards.sh
	Demonstrates the use of wildcards in UNIX

0 directories, 23 files
**********************************************************************

Testing README.txt...

======================================================================
Inspecting script file CountLines.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: CountLines.sh
# Desc: counts the number of lines in a file
# Arguments: any file
# Date: Oct 2018

NumLines=`wc -l < $1` # < redirects file contents to standard input of the comand 
echo "The file $1 has $NumLines lines"
echo

exit**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 

**********************************************************************
The file  has  lines


**********************************************************************

Encountered error:
CountLines.sh: line 8: $1: ambiguous redirect

======================================================================
Inspecting script file variables.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: variables.sh
# Desc: Illustration of the use of variables in UNIX
# Arguments: String and numbers entered by user at command line
# Date: Oct 2018

## Shows the use of variables
MyVar='some string' # explicit declaration
echo 'The current value of the variable is' $MyVar
echo 'Please enter a new string'
read MyVar # read from user
echo 'The current value of the variable is' $MyVar

## Reading multiple values
echo 'Enter two numbers separated by spaces(s)'
read a b
echo 'You entered' $a 'and' $b '. Their sum is:'
mysum=`expr $a + $b`
echo $mysum

exit**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 

**********************************************************************
The current value of the variable is some string
Please enter a new string
The current value of the variable is
Enter two numbers separated by spaces(s)
You entered and . Their sum is:


**********************************************************************

Encountered error:
expr: syntax error

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: CompileLaTeX.sh
# Desc: Compiles a LaTeX document with references
# Arguments: 1 .tex file and 1 .bib file
# Date: Oct 2018

file="$1"
filename="${file%%.*}" #strip name

# Compile
{
  pdflatex "$filename"
  bibtex "$filename"
  pdflatex "$filename"
} &> /dev/null
pdflatex "$filename"
printf "\n"

# Move output file to ../Results 
mv "$filename".pdf ../Results

{
        gnome-open "$filename.pdf"
} &> /dev/null

## Cleanup
rm -f *~
rm -f *.aux
rm -f *.dvi
rm -f *.log
rm -f *.nav
rm -f *.out
rm -f *.snm
rm -f *.toc
rm -f *.bbl
rm -f *.blg

exit**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 

**********************************************************************
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
**
! End of file on the terminal... why?


**********************************************************************

Encountered error:
mv: cannot stat '.pdf': No such file or directory

======================================================================
Inspecting script file tiff2png.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: tif2png.sh
# Desc: Script to convert a .tif image to a .png image
# Arguments: 1 -> .tif
# Date: Oct 2018

echo "Creating a .png version of $1 ..."

# Change file extension
filename="${1//.png/.tif}"

# Extract basename and change output directory
new_filename=$(basename $filename)
out_filename="../Results/$new_filename"

# Output
cat $1 >> $out_filename
echo "Done! The file has been saved as $out_filename"
exit**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 

**********************************************************************
Creating a .png version of  ...
Done! The file has been saved as ../Results/

**********************************************************************

Encountered error:
basename: missing operand
Try 'basename --help' for more information.
tiff2png.sh: line 18: ../Results/: Is a directory

======================================================================
Inspecting script file dir_structure.txt...

File contents are:
**********************************************************************
##############################
Basic UNIX directory structure
##############################

/       Is the "root" directory
/bin    Contains basic programs
/etc    Contains configuration files
/dev    Contains files connecting to devices (keyboard, mouse, screen, etc.)
/home   Your home directory - where most documents are
/tmp    Contains temporary files**********************************************************************

Testing dir_structure.txt...

======================================================================
Inspecting script file csvtospace.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: csvtospace.sh
# Desc: Script to convert a .csv file to a space separated
# Arguments: 1 .csv file
# Date: Oct 2018

echo "Creating a tab separated version of $1 ..."

# Change file extension
filename="${1//.csv/_space.txt}"

# Extract basename and change output directory
new_filename=$(basename $filename)
out_filename="../Results/$new_filename"

# Replace commas with spaces and output
cat $1 | tr -s "," "  " >> $out_filename
echo "Done! The file has been saved as $out_filename"
exit**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 

**********************************************************************
Creating a tab separated version of  ...
Done! The file has been saved as ../Results/

**********************************************************************

Encountered error:
basename: missing operand
Try 'basename --help' for more information.
csvtospace.sh: line 18: ../Results/: Is a directory

======================================================================
Inspecting script file FirstExample.tex...

File contents are:
**********************************************************************
\documentclass[12pt]{article}
\title{A Simple Document}
\author{Jacob Griffiths}
\date{09/10/18}
\begin{document}
  \maketitle

  \begin{abstract}
    This paper must be cool!
  \end{abstract}

  \section{Introduction}
    Blah Blah!

  \section{Materials \& Methods}
  One of the most famous equations is:
  \begin{equation}
    E = mc^2
  \end{equation}
  This equation was first proposed by Einstein in 1905 
  \cite{einstein1905does}.

  \bibliographystyle{plain}
  \bibliography{FirstBiblio.bib}
\end{document}\grid**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: MyExampleScript.sh
# Desc: Illustrates the 'echo' function and placeholders
# Arguments: String from command line
# Date: Oct 2018

msg1="Hello"
msg2=$USER
echo "$msg1 $msg2"
echo "Hello $USER"
echo

exit**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 

**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00451s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:
**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content},
  author={Einstein, Albert},
  journal={Annalen der Physik},
  volume={18},
  number={13},
  pages={639--641},
  year={1905}
}**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:
**********************************************************************
#1 - Count how many lines are in each file
# 'wc' prints newline, word and byte counts for a specified file or set of files and '-l' limits this to just the newline counts

wc -l ../Data/{407228326.fasta,407228412.fasta,E.coli.fasta}


#2 - Print everything starting from the second line for the E. coli genome
# 'tail' outputs the last part of a file starting from a specific location. '-n' tells 'tail' to start from a specific line, in this case line 2

tail -n +2 ../Data/E.coli.fasta


#3 - Count the sequence length of the genome
# 'tr' translates or deletes characters and '-d' specifies deletion of characters in SET1. In this case I have instructed the deletion of newline characters, '\n'. I have used 'wc' again but with '-m' this time to print the character counts. 'tail' has been used again to start the count from line 2 as line 1 doesn't contain genomic data.

tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | wc -m


#4 - Count the matches of a particular sequence, "ATGC" in the genome of E. coli
# 'grep' searches a file for lines containing a match to a given pattern. If a pattern appears twice on the same line, grep by default will only count that as one matching line. '-o' is used here to specify that all occurences of the pattern need to be output onto a line so 'wc' will count the correct number of occurrences of this pattern.

tail -n +2 ../Data/E.coli.fasta | tr -d '\n' | grep -o ATGC | wc -l


#5 - Compute the AT/GC ratio
# '&&' is used here to connect a series of commands. '&&' ensures that the operation only continues if the previous operation was successful. '$' is used to assign variables which are then used in an expression. 'bc' is a calculator and '-l' is used to define the standard math library. 'echo' is used to display the result of the calculation in the terminal.

a=$(tail -n +2 ../Data/E.coli.fasta | grep -o A | wc -l) && 
g=$(tail -n +2 ../Data/E.coli.fasta | grep -o G | wc -l) && 
t=$(tail -n +2 ../Data/E.coli.fasta | grep -o T | wc -l) && 
c=$(tail -n +2 ../Data/E.coli.fasta | grep -o C | wc -l) && 
result=$(echo "($a+$t)/($g+$c)" | bc -l) && echo "AT/GC ratio = $result"**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: tabtocsv.sh
# Desc: substitute the spaces in the files with commas
# Arguments: 1-> tab delimited file
# Date: Oct 2018

echo "Creating a comma separated version of $1 ..."

# Change file extension
filename="${1//.txt/.csv}"

# Extract basename and change output directory
new_filename=$(basename $filename)
out_filename="../Results/$new_filename"

# Replace spaces with commas and output
cat $1 | tr -s " " "," >> $out_filename
echo "Done! The file has been saved as $out_filename"
exit**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 

**********************************************************************
Creating a comma separated version of  ...
Done! The file has been saved as ../Results/

**********************************************************************

Encountered error:
basename: missing operand
Try 'basename --help' for more information.
tabtocsv.sh: line 18: ../Results/: Is a directory

======================================================================
Inspecting script file finding_files.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: finding_files.sh
# Desc: demonstrating finding files in UNIX
# Date: Nov 2018

cd ../Sandbox
mkdir TestFind
cd TestFind
mkdir -p Dir1/Dir11/Dir111 # -p ensures no errors if file already exists
mkdir Dir2
mkdir Dir3
touch Dir1/File1.txt
touch Dir1/File1.csv
touch Dir1/File1.tex
touch Dir2/File2.txt
touch Dir2/file2.csv
touch Dir2/File2.tex
touch Dir1/Dir11/Dir111/File111.txt
touch Dir3/File3.txt

# Find particular files
find . -name "File1.txt"

# Ignore cases and use wildcards
find . -iname "fi*.txt"

# Exclude sub-directories
find . -maxdepth 2 -name "*.txt"

# Exclude certain files
find . -maxdepth 2 -not -name "*.txt"

# Find only directories
find . -type d -iname *dir*

exit**********************************************************************

Testing finding_files.sh...

Output (only first 500 characters): 

**********************************************************************
./Dir1/File1.txt
./Dir1/Dir11/Dir111/File111.txt
./Dir1/File1.txt
./Dir3/File3.txt
./Dir2/File2.txt
./Dir1/File1.txt
./Dir3/File3.txt
./Dir2/File2.txt
.
./Dir1
./Dir1/Dir11
./Dir1/File1.csv
./Dir1/File1.tex
./Dir3
./Dir2
./Dir2/File2.tex
./Dir2/file2.csv
./Dir1
./Dir1/Dir11
./Dir1/Dir11/Dir111
./Dir3
./Dir2

**********************************************************************

Code ran without errors

Time consumed = 0.02769s

======================================================================
Inspecting script file UNIX_shortcuts.txt...

File contents are:
**********************************************************************
#######################
UNIX keyboard shortcuts
#######################

Ctrl + Alt + t      Launch bash shell
Tab                 Auto-complete
Ctrl + A            Go to the beginning of the line
Ctrl + E            Go to the end of the line
Ctrl + L            Clear the screen
Ctrl + U            Clear the line before cursor position
Ctrl + K            Clear the line after the cursor
Ctrl + C            Kill whatever you are running
Ctrl + D            Exit (close) the current shell
Ctrl + right arrow  Move cursor forward one whole word
Ctrl + left arrow   Move cursor backward one whole word**********************************************************************

Testing UNIX_shortcuts.txt...

======================================================================
Inspecting script file grep.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: grep.sh
# Desc: demonstrating the use of grep
# Date: Nov 2018

# grep is a command that matches strings in a file (based on regex)

cd ../Sandbox
# Download test file
wget http://www.cep.unep.org/pubs/legislation/spawannxs.txt 

# Print first 50 lines
head -n 50 spawannxs.txt 

# Move file and change directory
mv spawannxs.txt ../Data/
cd ../Data

# Let's look for falcons
grep Falco spawannxs.txt

# Make it cast-insensitive
grep -i Falco spawannxs.txt

# Let's find the "Ara" macaws
grep -i ara spawannxs.txt # Returns some non-ara results

# Solve this by specifying only full word matches
grep -i -w ara spawannxs.txt

# Show line(s) after the one that was matched using -A x
grep -i -w -A 1 ara spawannxs.txt # shows 1 line after match

# -B shows lines before
grep -i -w -B 1 ara spawannxs.txt

# -n shows line number of match
grep -i -w -n ara spawannxs.txt

# -v prints all lines that DO NOT match pattern
grep -i -w -v ara spawannxs.txt

exit**********************************************************************

Testing grep.sh...

Output (only first 500 characters): 

**********************************************************************
ANNEX I
List of Species of Marine and Coastal Flora 
Protected Under Article 11(1)(a)

TRACHAEOPHYTA (Vascular Plants)

Family		Genus		Species

Aquifoliaceae	Ilex		cookii
Bignoniaceae	Crescentia	mirabilis
Bignoniaceae	Crescentia	portoricensis
Boraginaceae	Cordia		wagnerorum
Buxaceae	Buxus		vahlii
Cactaceae	Echinocereus 	reichenbachii var. albertii
Cactaceae	Harrisia	fragrans
Cactaceae	Harrisia	portoricensis
Cactaceae	Leptocereus	grantianus
Cactaceae	Leptocereus	wrightii
Cactacea
**********************************************************************

Encountered error:
--2019-01-02 12:47:32--  http://www.cep.unep.org/pubs/legislation/spawannxs.txt
Resolving www.cep.unep.org (www.cep.unep.org)... 173.230.137.102
Connecting to www.cep.unep.org (www.cep.unep.org)|173.230.137.102|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 13467 (13K) [text/plain]
Saving to: ‘spawannxs.txt’

     0K .......... ...                                        100%  221M=0s

2019-01-02 12:47:32 (221 MB/s) - ‘spawannxs.txt’ saved [13467/13467]


======================================================================
Inspecting script file bash_command_challenge.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: bash_command_challenge.sh
# Desc: A challenge question
# Date: Nov 2018

# What does this do?
find . -type f -exec ls -s {} \; | sort -n | head -10
# -type f, means the file is a regular file
# -exec ls -s {} \; is saying list all matches with their file size
# These results are then sorted by numerical string value
# Then the first 10 results are printed
# Essentially, it is finding and printing the 10 longest file names
exit**********************************************************************

Testing bash_command_challenge.sh...

Output (only first 500 characters): 

**********************************************************************
4 ./bash_command_challenge.sh
4 ./boilerplate.sh
4 ./CompileLaTeX.sh
4 ./ConcatenateTwoFiles.sh
4 ./CountLines.sh
4 ./csvtospace.sh
4 ./dir_structure.txt
4 ./finding_files.sh
4 ./FirstBiblio.bib
4 ./FirstExample.tex

**********************************************************************

Code ran without errors

Time consumed = 0.02531s

======================================================================
Inspecting script file redir_pipes.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: redir_pipes.sh
# Desc: demonstrating redirection and pipes
# Date: Nov 2018

# Redirecting output to a file, if the file already exists it wil be overwritten
echo "My first line." > ../Results/test.txt
cat ../Results/test.txt

# Append the output to a file, if the file does not exist, it will be created.
echo "My second line" >> ../Results/test.txt
cat ../Results/test.txt

# Listing all files in directory and listing in a file
ls / >> ../Results/ListRootDir.txt
cat ../Results/ListRootDir.txt

# Commands can also be concatenated with pipes "|"
# How many files in root directory?
ls / | wc -l

# List files in long format and sorted by modification time, newest first
# Only print first 5 files
ls -lt | head -5

exit**********************************************************************

Testing redir_pipes.sh...

Output (only first 500 characters): 

**********************************************************************
My first line.
My first line.
My second line
bin
boot
cdrom
dev
etc
home
initrd.img
initrd.img.old
lib
lib64
lost+found
media
mnt
opt
proc
root
run
sbin
snap
srv
sys
tmp
usr
var
vmlinuz
vmlinuz.old
26
total 92
-rw-rw-r-- 1 mhasoba mhasoba  511 Jan  2 12:17 bash_command_challenge.sh
-rw-rw-r-- 1 mhasoba mhasoba  304 Jan  2 12:17 boilerplate.sh
-rw-rw-r-- 1 mhasoba mhasoba  631 Jan  2 12:17 CompileLaTeX.sh
-rw-rw-r-- 1 mhasoba mhasoba  258 Jan  2 12:17 ConcatenateTwoFiles.sh

**********************************************************************

Code ran without errors

Time consumed = 0.01138s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: None
# Date: Oct 2018

echo -e "\nThis is a shell script! \n" 
# echo displays a line of text and -e enables interpretation of backslash escapes

exit**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 

**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00307s

======================================================================
Inspecting script file wildcards.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: wildcards.sh
# Desc: demonstrating wildcards
# Date: Nov 2018

# Wildcards can be used to find files based on their names
# First, make some test files
mkdir ../Sandbox/TestWild
cd ../Sandbox/TestWild
touch File1txt
touch File2.txt
touch File3.txt
touch File4.txt
touch File1.csv
touch File2.csv
touch File3.csv
touch File4.csv
touch Anotherfile.csv
touch Anotherfile.txt
ls 
ls | wc -l

# "?"	    Any single character, except a leading dot (hidden files).
# "*"	    Zero or more characters, except a leading dot (hidden files).
# "[A-Z]"	Define a class of characters (e.g., upper-case letters).

# Finding files
ls * # finds all except hidden files (leading dot)
ls File* # anything starting with "File"
ls *.txt # anything ending with ".txt"
ls File?.txt # anything starting with "File", followed by 1 character, and ending with ".txt"
ls File[1-2].txt # anything starting with "File", followed by 1 or 2, and ending with ".txt"
ls File[!3].* # anything starting with "File", followed by anything except 3, and any ending

exit**********************************************************************

Testing wildcards.sh...

Output (only first 500 characters): 

**********************************************************************
Anotherfile.csv
Anotherfile.txt
File1.csv
File1txt
File2.csv
File2.txt
File3.csv
File3.txt
File4.csv
File4.txt
10
Anotherfile.csv
Anotherfile.txt
File1.csv
File1txt
File2.csv
File2.txt
File3.csv
File3.txt
File4.csv
File4.txt
File1.csv
File1txt
File2.csv
File2.txt
File3.csv
File3.txt
File4.csv
File4.txt
Anotherfile.txt
File2.txt
File3.txt
File4.txt
File2.txt
File3.txt
File4.txt
File2.txt
File1.csv
File2.csv
File2.txt
File4.csv
File4.txt

**********************************************************************

Code ran without errors

Time consumed = 0.01860s

======================================================================
Inspecting script file tr.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Jacob Griffiths jacob.griffiths18@imperial.ac.uk
# Script: tr.sh
# Desc: demonstrating the use of tr
# Date: Nov 2018

# tr is an abbreviation or translate or transliterate
# It deletes or subsitutes characters

# Remove excess spaces
echo "Remove    excess      spaces." | tr -s "\b" " "
# -s squeezes repeats into one occurence of that character

# Remove all the "a"s
echo "remove all the as" | tr -d "a"
# -d deletes characters

# Set to uppercase
echo "set to uppercase" | tr [:lower:] [:upper:]

# Remove non-numbers
echo "10.00 only numbers 1.33" | tr -d [:alpha:] | tr -s " " ","

exit**********************************************************************

Testing tr.sh...

Output (only first 500 characters): 

**********************************************************************
Remove excess spaces.
remove ll the s
SET TO UPPERCASE
10.00,1.33

**********************************************************************

Code ran without errors

Time consumed = 0.01030s

======================================================================
======================================================================
Finished running scripts

Ran into 8 errors

======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!