graphics.off()
#1 - measure species richness based on input vector
species_richness <- function(community){
return(length(unique(community)))
}
#2 - function to define max possible species in community
initialise_max <- function(size){
return(seq(1:size))
}
#3 - Monodominance
initialise_min <- function(size){
x <- rep(1, each=size)
return(x)
}
#4 - Generating two random integers
choose_two <- function(x){
sample(1:x, 2, replace=F)
}
#5 - single step of neutral model sim
neutral_step <- function(y){
x <- choose_two(length(y))
new <- replace(y, x[1], y[x[2]])
return(new)
}
#6 - several steps
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for i in (1:gentime){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
?replace
y = c(1,3)
x = y
y = c(10,5,13)
replace(y, x[1], 10000)
replace(y, x[1], 10000)
replace(y, x[2], 10000)
replace(y, x[2], 10000)
replace(y, 1, 10000)
replace(y, 2, 10000)
replace(y, 3, 10000)
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
replace(y, x[1], y[x[2]])
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
choose_two(length(y))
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
neutral_generation(c(10,5,13))
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for j in seq(1,15){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,1000000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
source('~/.active-rstudio-document', echo=TRUE)
counter = 0
for (i in seq(1,10000)){
if (i %% 1000 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
neutral_generation <- function(a){
gentime <- ceiling(sum(y)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
neutral_generation <- function(a){
gentime <- ceiling(sum(a)/2)
for (i in (1:gentime)){
a <- neutral_step(a)
}
return(a)
}
counter = 0
for (i in seq(1,100000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (unique(x) != 1){
counter = counter + 1
}
}
unique(x)
counter = 0
for (i in seq(1,10000)){
if (i %% 100 == 0){
print(i)
}
x = c(10,5,13)
for (j in seq(1,15)){
x = neutral_generation(x)
}
if (length(unique(x)) != 1){
counter = counter + 1
}
}
data <- read.csv("~/Desktop/leah_data.csv")
View(data)
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
read.csv?
)
help("read.csv")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
View(data)
View(data)
library("MASS")
print(str(data))
## Cross-tabulation ##
fourandsix <- data.frame(data$Source, data$Care)
View(fourandsix)
fourandsix = table(data$Source, data$Care)
print(fourandsix)
print(chisq.test(fourandsix))
sixandten <- data.frame(data$Care, data$Relationship) ##subset
sixandten = table(data$Care, data$Relationship) ##cross-tabulate
print(sixandten) ##view cross-tabulation
print(chisq.test(sixandten)) ##chi-squared
sevenandten <- data.frame(data$Care_reason, data$Relationship) ##subset
sevenandten = table(data$Care_reason, data$Relationship) ##cross-tabulate
print(sevenandten) ##view cross-tabulation
print(chisq.test(sevenandten)) ##chi-squared
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
rm(list=ls())
MySample <- rnorm(10, m=0, sd=1)
MySample
hist(MySample)
# Probability of getting a value of 1 or -1 from a normally-distributed random number
# with mean 0 and sd = 1:
dnorm(1, m=0, sd=1)
dnorm(-1, m=0, sd=1)
# Probability of getting large value with same distribution:
dnorm(10, m=0, sd=1)
dnorm(100, m=0, sd=1)
# Testing rule 1 using R:
MySample5 <- rnorm(5, m=0, sd=1)
source('~/leah.R')
View(data)
convenienceandsix <- data.frame(data$Convenience, data$Care) ##subset
convenienceandsix = table(data$Convenience, data$Care) ##cross-tabulate
print(convenienceandsix) ##view cross-tabulation
print(chisq.test(convenienceandsix)) ##chi-squared
damageandsix <- data.frame(data$Damage, data$Care) ##subset
damageandsix = table(data$Damage, data$Care) ##cross-tabulate
print(damageandsix) ##view cross-tabulation
print(chisq.test(damageandsix)) ##chi-squared
welfareandsix <- data.frame(data$Welfare, data$Care) ##subset
welfareandsix = table(data$Welfare, data$Care) ##cross-tabulate
print(welfareandsix) ##view cross-tabulation
print(chisq.test(welfareandsix)) ##chi-squared
securityandsix <- data.frame(data$Security, data$Care) ##subset
securityandsix = table(data$Security, data$Care) ##cross-tabulate
print(securityandsix) ##view cross-tabulation
print(chisq.test(securityandsix)) ##chi-squared
### Finance vs. Day care option ###
financeandsix <- data.frame(data$Finance, data$Care) ##subset
financeandsix = table(data$Finance, data$Care) ##cross-tabulate
print(financeandsix) ##view cross-tabulation
print(chisq.test(financeandsix)) ##chi-squared
### Convenience vs. Day care option ###
convenienceandsix <- data.frame(data$Convenience, data$Care) ##subset
convenienceandsix = table(data$Convenience, data$Care) ##cross-tabulate
print(convenienceandsix) ##view cross-tabulation
print(chisq.test(convenienceandsix)) ##chi-squared
### Damage vs. Day care option ###
damageandsix <- data.frame(data$Damage, data$Care) ##subset
damageandsix = table(data$Damage, data$Care) ##cross-tabulate
print(damageandsix) ##view cross-tabulation
print(chisq.test(damageandsix)) ##chi-squared
### Welfare vs. Day care option ###
welfareandsix <- data.frame(data$Welfare, data$Care) ##subset
welfareandsix = table(data$Welfare, data$Care) ##cross-tabulate
print(welfareandsix) ##view cross-tabulation
print(chisq.test(welfareandsix)) ##chi-squared
### Security vs. Day care option ###
securityandsix <- data.frame(data$Security, data$Care) ##subset
securityandsix = table(data$Security, data$Care) ##cross-tabulate
print(securityandsix) ##view cross-tabulation
print(chisq.test(securityandsix)) ##chi-squared
source('~/leah.R')
source('~/leah.R')
library("ggplot2")
source('~/leah.R')
warnings()
### Visualisation ###
qplot(Alone_time, data=data)
### Visualisation ###
qplot(as.factor(Alone_time), data=data)
### Visualisation ###
qplot(as.factor(Alone_time)), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data)
### Visualisation ###
ggplot(as.factor(Alone_time)), data=data)
### Visualisation ###
ggplot(as.factor(Alone_time), data=data, colour = as.factor(Alone_time))
### Visualisation ###
ggplot(as.factor(Alone_time), data=data)
### Visualisation ###
qplot(as.factor(Alone_time), data=data)
?qplot
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour=cyl)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="cyl")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, colour=red)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill="red")
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=Alone_time)
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time))
### Visualisation ###
qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.5), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour="black", fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour=Interaction, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, colour=Interaction, xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
### Visualisation ###
bp <- qplot(as.factor(Alone_time), data=data, fill=as.factor(Alone_time), alpha = I(0.7), xlab="Time left alone (hours/week)",
ylab="Number of responses")
bp + guides(fill=FALSE)
rm(list=ls())
graphics.off()
library("ggplot2")
library("MASS")
data <- read.csv("~/Desktop/leah_data.csv", header=TRUE)
load("~/Documents/CMEECourseWork/Week9/Output1.rda")
View(input_params)
load("~/Documents/CMEECourseWork/Week9/Output2.rda")
View(input_params)
View(input_params)
View(input_params)
View(input_params)
load("~/Documents/CMEECourseWork/Week9/Output3.rda")
View(input_params)
source('~/Downloads/graphs.R')
setwd("~/Documents/CMEECourseWork/Week14/Code")
source('~/Documents/CMEECourseWork/Week14/Code/practical4.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical4.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical4.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical2.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical2.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical2.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical2.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical2.R')
persp(b, sigma, rel.log.likelihood.value, theta=-20, phi=20,
xlab='b', ylab='sigma', zlab='rel.log.likelihood.value',
col='grey')
persp(b, sigma, rel.log.likelihood.value, theta=20, phi=20,
xlab='b', ylab='sigma', zlab='rel.log.likelihood.value',
col='grey')
persp(b, sigma, rel.log.likelihood.value, theta=30, phi=20,
xlab='b', ylab='sigma', zlab='rel.log.likelihood.value',
col='grey')
source('~/Documents/CMEECourseWork/Week14/Code/practical2.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical2.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical2.R')
source('~/Documents/CMEECourseWork/Week14/Code/practical1.R')
rm(list = ls())
graphics.off()
binomial.likelihood <- function(p){
choose(10,7)*p^7*(1-p)^3
}
# Check likelihood value for p=0.1
binomial.likelihood(p=0.1)
p <- seq(0, 1, 0.01)
likelihood.values <- binomial.likelihood(p)
plot(p, likelihood.values, type='l')
log.binomial.likelihood <- function(p){
log(binomial.likelihood(p=p))
}
p < -seq(0,1,0.01)
log.likelihood.values <- log.binomial.likelihood(p)
plot(p, log.likelihood.values, type='l')
abline(a=NULL, b=NULL, h=NULL, v=0.8)
abline(v=0.8, col='red')
?abline
abline(v=0.8, col='red', lwd='dashed')
plot(p, log.likelihood.values, type='l')
plot(p, log.likelihood.values, type='l')
abline(v=0.8, col='red', lwd='dashed')
abline(v=0.8, col='red', lty=2)
abline(y=1.92, col='red', lty=2)
abline(h=1.92, col='red', lty=2)
log.likelihood.values
plot(p, log.likelihood.values, type='l')
abline(h=1.92, col='red', lty=2)
abline(h=-1.92, col='red', lty=2)
abline(v=0.75, col='gray', lty=2)
abline(v=0.25, col='gray', lty=2)
abline(h=-1.92, col='red', lty=2)
abline(v=0.75, col='black', lty=2)
abline(v=0.25, col='black', lty=2)
plot(p, log.likelihood.values, type='l')
abline(h=-1.92, col='red', lty=2)
abline(v=0.8, col='black', lty=2)
abline(v=0.5, col='black', lty=2)
abline(h=-1.92, col='red', lty=2)
abline(v=0.82, col='black', lty=2)
abline(v=0.52, col='black', lty=2)
plot(p, log.likelihood.values, type='l')
abline(h=-1.92, col='red', lty=2)
abline(v=0.82, col='black', lty=2)
abline(v=0.52, col='black', lty=2)
flowering <- read.table('../Data/flowering.txt', header=T)
source('~/Documents/CMEECourseWork/Week14/Code/practical4.R')
names(flowering)
head(flowering)
# Inspect the data
par(mfrow=c(1,2))
plot(flowering$Flowers, flowering$State)
plot(flowering$Root, flowering$State)
source('~/Documents/CMEECourseWork/Week14/Code/practical4.R')
#Try
logistic.log.likelihood(c(0,0,0), dat=flowering)
?optim
# Time to OPTIMISE THIS SHIT
M1 <- optim(c(0,0,0), logistic.log.likelihood(c(0,0,0), dat=flowering))
# Time to OPTIMISE THIS SHIT
M1 <- optim(par=c(0,0,0), fn=logistic.log.likelihood(c(0,0,0), dat=flowering))
# Time to OPTIMISE THIS SHIT
M1 <- optim(par=c(0,0,0), fn=logistic.log.likelihood(c(0,0,0), dat=flowering)))
# Time to OPTIMISE THIS SHIT
M1 <- optim(par=c(0,0,0), fn=logistic.log.likelihood(dat=flowering))
# Time to OPTIMISE THIS SHIT
M1 <- optim(par=c(0,0,0), fn=logistic.log.likelihood(par=par, dat=flowering))
# Time to OPTIMISE THIS SHIT
M1 <- optim(par=c(0,0,0), fn=logistic.log.likelihood(par=c(0,0,0), dat=flowering))
# Time to OPTIMISE THIS SHIT
M1 <- optim(par=c(0,0,0), fn=logistic.log.likelihood, dat=flowering, control=list(fnscale=-1))
M1
source('~/Documents/CMEECourseWork/Week14/Code/practical4.R')
M2 <- optim(par=c(0,0,0,0), fn=logistic.log.likelihood.int, dat=flowering, control=list(fnscale=-1))
M2
logistic.log.likelihood.int(c(0,0,0,0), dat=flowering)
# Likelihood-ratio test
D <- 2*(M2$value - M1$value)
D
# Confirm with glm
glm.M1 <- glm(State~Flowers+Root, family=binomial, data=flowering)
glm.M2 <- glm(State~Flowers*Root, family=binomial, data=flowering)
anova(glm.M1, glm.M2, test='LRT')
